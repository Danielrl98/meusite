// node_modules/@vue/shared/dist/shared.esm-bundler.js
function makeMap(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i = 0; i < list.length; i++) {
    map2[list[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
var GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
var isGloballyWhitelisted = makeMap(GLOBALS_WHITE_LISTED);
var specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
var isSpecialBooleanAttr = makeMap(specialBooleanAttrs);
var isBooleanAttr = makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
var isNoUnitNumericStyleProp = makeMap(`animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width`);
var isKnownHtmlAttr = makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);
var isKnownSvgAttr = makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value)) {
    return value;
  } else if (isObject(value)) {
    return value;
  }
}
var listDelimiterRE = /;(?![^(]*\))/g;
var propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props)
    return null;
  let { class: klass, style } = props;
  if (klass && !isString(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}
var HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
var SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
var VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
var isHTMLTag = makeMap(HTML_TAGS);
var isSVGTag = makeMap(SVG_TAGS);
var isVoidTag = makeMap(VOID_TAGS);
function looseCompareArrays(a, b) {
  if (a.length !== b.length)
    return false;
  let equal = true;
  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }
  return equal;
}
function looseEqual(a, b) {
  if (a === b)
    return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isSymbol(a);
  bValidType = isSymbol(b);
  if (aValidType || bValidType) {
    return a === b;
  }
  aValidType = isArray(a);
  bValidType = isArray(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject(a);
  bValidType = isObject(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
var toDisplayString = (val) => {
  return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
var replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};
var EMPTY_OBJ = true ? Object.freeze({}) : {};
var EMPTY_ARR = true ? Object.freeze([]) : [];
var NOOP = () => {
};
var NO = () => false;
var onRE = /^on[^a-z]/;
var isOn = (key) => onRE.test(key);
var isModelListener = (key) => key.startsWith("onUpdate:");
var extend = Object.assign;
var remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = (val, key) => hasOwnProperty.call(val, key);
var isArray = Array.isArray;
var isMap = (val) => toTypeString(val) === "[object Map]";
var isSet = (val) => toTypeString(val) === "[object Set]";
var isDate = (val) => toTypeString(val) === "[object Date]";
var isFunction = (val) => typeof val === "function";
var isString = (val) => typeof val === "string";
var isSymbol = (val) => typeof val === "symbol";
var isObject = (val) => val !== null && typeof val === "object";
var isPromise = (val) => {
  return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
var objectToString = Object.prototype.toString;
var toTypeString = (value) => objectToString.call(value);
var toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
var isPlainObject = (val) => toTypeString(val) === "[object Object]";
var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
var isReservedProp = makeMap(
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
var isBuiltInDirective = makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
var cacheStringFunction = (fn) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
var camelizeRE = /-(\w)/g;
var camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
var capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
var toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
var hasChanged = (value, oldValue) => !Object.is(value, oldValue);
var invokeArrayFns = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};
var def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
var toNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
var _globalThis;
var getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};

// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
function warn(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
var activeEffectScope;
var EffectScope = class {
  constructor(detached = false) {
    this.active = true;
    this.effects = [];
    this.cleanups = [];
    if (!detached && activeEffectScope) {
      this.parent = activeEffectScope;
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
    }
  }
  run(fn) {
    if (this.active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    } else if (true) {
      warn(`cannot run an inactive effect scope.`);
    }
  }
  on() {
    activeEffectScope = this;
  }
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this.active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.active = false;
    }
  }
};
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect2, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn);
  } else if (true) {
    warn(`onScopeDispose() is called when there is no active effect scope to be associated with.`);
  }
}
var createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
var wasTracked = (dep) => (dep.w & trackOpBit) > 0;
var newTracked = (dep) => (dep.n & trackOpBit) > 0;
var initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].w |= trackOpBit;
    }
  }
};
var finalizeDepMarkers = (effect2) => {
  const { deps } = effect2;
  if (deps.length) {
    let ptr = 0;
    for (let i = 0; i < deps.length; i++) {
      const dep = deps[i];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect2);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
var targetMap = /* @__PURE__ */ new WeakMap();
var effectTrackDepth = 0;
var trackOpBit = 1;
var maxMarkerBits = 30;
var activeEffect;
var ITERATE_KEY = Symbol(true ? "iterate" : "");
var MAP_KEY_ITERATE_KEY = Symbol(true ? "Map key iterate" : "");
var ReactiveEffect = class {
  constructor(fn, scheduler = null, scope) {
    this.fn = fn;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect;
    let lastShouldTrack = shouldTrack;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect;
      activeEffect = this;
      shouldTrack = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect = this.parent;
      shouldTrack = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
};
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect2);
    }
    deps.length = 0;
  }
}
function effect(fn, options) {
  if (fn.effect) {
    fn = fn.effect.fn;
  }
  const _effect = new ReactiveEffect(fn);
  if (options) {
    extend(_effect, options);
    if (options.scope)
      recordEffectScope(_effect, options.scope);
  }
  if (!options || !options.lazy) {
    _effect.run();
  }
  const runner = _effect.run.bind(_effect);
  runner.effect = _effect;
  return runner;
}
function stop(runner) {
  runner.effect.stop();
}
var shouldTrack = true;
var trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep());
    }
    const eventInfo = true ? { effect: activeEffect, target, type, key } : void 0;
    trackEffects(dep, eventInfo);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
    if (activeEffect.onTrack) {
      activeEffect.onTrack(Object.assign({ effect: activeEffect }, debuggerEventExtraInfo));
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray(target)) {
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newValue) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  const eventInfo = true ? { target, type, key, newValue, oldValue, oldTarget } : void 0;
  if (deps.length === 1) {
    if (deps[0]) {
      if (true) {
        triggerEffects(deps[0], eventInfo);
      } else {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    if (true) {
      triggerEffects(createDep(effects), eventInfo);
    } else {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  const effects = isArray(dep) ? dep : [...dep];
  for (const effect2 of effects) {
    if (effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
  for (const effect2 of effects) {
    if (!effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
}
function triggerEffect(effect2, debuggerEventExtraInfo) {
  if (effect2 !== activeEffect || effect2.allowRecurse) {
    if (effect2.onTrigger) {
      effect2.onTrigger(extend({ effect: effect2 }, debuggerEventExtraInfo));
    }
    if (effect2.scheduler) {
      effect2.scheduler();
    } else {
      effect2.run();
    }
  }
}
var isNonTrackableKeys = makeMap(`__proto__,__v_isRef,__isVue`);
var builtInSymbols = new Set(
  Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
var get = createGetter();
var shallowGet = createGetter(false, true);
var readonlyGet = createGetter(true);
var shallowReadonlyGet = createGetter(true, true);
var arrayInstrumentations = createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray(target);
    if (!isReadonly2 && targetIsArray && hasOwn(arrayInstrumentations, key)) {
      return Reflect.get(arrayInstrumentations, key, receiver);
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
var set = createSetter();
var shallowSet = createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
      return false;
    }
    if (!shallow && !isReadonly(value)) {
      if (!isShallow(value)) {
        value = toRaw(value);
        oldValue = toRaw(oldValue);
      }
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function has(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
var mutableHandlers = {
  get,
  set,
  deleteProperty,
  has,
  ownKeys
};
var readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    if (true) {
      warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  },
  deleteProperty(target, key) {
    if (true) {
      warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  }
};
var shallowReactiveHandlers = extend({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
var shallowReadonlyHandlers = extend({}, readonlyHandlers, {
  get: shallowReadonlyGet
});
var toShallow = (value) => value;
var getProto = (v) => Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly2 = false, isShallow3 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow3 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$1(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (true) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (true) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = true ? isMap(target) ? new Map(target) : new Set(target) : void 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow3) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow3 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow3) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow3 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    if (true) {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
    }
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$1(this, key);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$1(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
var [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
var mutableCollectionHandlers = {
  get: createInstrumentationGetter(false, false)
};
var shallowCollectionHandlers = {
  get: createInstrumentationGetter(false, true)
};
var readonlyCollectionHandlers = {
  get: createInstrumentationGetter(true, false)
};
var shallowReadonlyCollectionHandlers = {
  get: createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
  }
}
var reactiveMap = /* @__PURE__ */ new WeakMap();
var shallowReactiveMap = /* @__PURE__ */ new WeakMap();
var readonlyMap = /* @__PURE__ */ new WeakMap();
var shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function shallowReadonly(target) {
  return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject(target)) {
    if (true) {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
var toReactive = (value) => isObject(value) ? reactive(value) : value;
var toReadonly = (value) => isObject(value) ? readonly(value) : value;
function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    if (true) {
      trackEffects(ref2.dep || (ref2.dep = createDep()), {
        target: ref2,
        type: "get",
        key: "value"
      });
    } else {
      trackEffects(ref2.dep || (ref2.dep = createDep()));
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  if (ref2.dep) {
    if (true) {
      triggerEffects(ref2.dep, {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      });
    } else {
      triggerEffects(ref2.dep);
    }
  }
}
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
var RefImpl = class {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    newVal = this.__v_isShallow ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = this.__v_isShallow ? newVal : toReactive(newVal);
      triggerRefValue(this, newVal);
    }
  }
};
function triggerRef(ref2) {
  triggerRefValue(ref2, true ? ref2.value : void 0);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
var shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
var CustomRefImpl = class {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get: get2, set: set2 } = factory(() => trackRefValue(this), () => triggerRefValue(this));
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
};
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  if (!isProxy(object)) {
    console.warn(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef(object, key);
  }
  return ret;
}
var ObjectRefImpl = class {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
};
function toRef(object, key, defaultValue) {
  const val = object[key];
  return isRef(val) ? val : new ObjectRefImpl(object, key, defaultValue);
}
var ComputedRefImpl = class {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this._dirty = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
};
function computed(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = true ? () => {
      console.warn("Write operation failed: computed value is readonly");
    } : NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
var _a;
var tick = Promise.resolve();
_a = "__v_isReadonly";

// node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var stack = [];
function pushWarningContext(a) {
  stack.push(a);
}
function popWarningContext() {
  stack.pop();
}
function warn2(c, ...f) {
  pauseTracking();
  let a = stack.length ? stack[stack.length - 1].component : null, g = a && a.appContext.config.warnHandler, b = getComponentTrace();
  if (g)
    callWithErrorHandling(g, a, 11, [c + f.join(""), a && a.proxy, b.map(({ vnode: b2 }) => `at <${formatComponentName(a, b2.type)}>`).join("\n"), b]);
  else {
    let i = [`[Vue warn]: ${c}`, ...f];
    b.length && i.push(`
`, ...formatTrace(b)), console.warn(...i);
  }
  resetTracking();
}
function getComponentTrace() {
  let a = stack[stack.length - 1];
  if (!a)
    return [];
  let b = [];
  for (; a; ) {
    let c = b[0];
    c && c.vnode === a ? c.recurseCount++ : b.push({ vnode: a, recurseCount: 0 });
    let d = a.component && a.component.parent;
    a = d && d.vnode;
  }
  return b;
}
function formatTrace(a) {
  let b = [];
  return a.forEach((a2, c) => {
    b.push(...0 === c ? [] : [`
`], ...formatTraceEntry(a2));
  }), b;
}
function formatTraceEntry({ vnode: a, recurseCount: b }) {
  let e = b > 0 ? `... (${b} recursive calls)` : "", f = !!a.component && null == a.component.parent, c = ` at <${formatComponentName(a.component, a.type, f)}`, d = ">" + e;
  return a.props ? [c, ...formatProps(a.props), d] : [c + d];
}
function formatProps(c) {
  let a = [], b = Object.keys(c);
  return b.slice(0, 3).forEach((b2) => {
    a.push(...formatProp(b2, c[b2]));
  }), b.length > 3 && a.push(" ..."), a;
}
function formatProp(b, a, c) {
  return isString(a) ? (a = JSON.stringify(a), c ? a : [`${b}=${a}`]) : "number" == typeof a || "boolean" == typeof a || null == a ? c ? a : [`${b}=${a}`] : isRef(a) ? (a = formatProp(b, toRaw(a.value), true), c ? a : [`${b}=Ref<`, a, ">"]) : isFunction(a) ? [`${b}=fn${a.name ? `<${a.name}>` : ""}`] : (a = toRaw(a), c ? a : [`${b}=`, a]);
}
var ErrorTypeStrings = { sp: "serverPrefetch hook", bc: "beforeCreate hook", c: "created hook", bm: "beforeMount hook", m: "mounted hook", bu: "beforeUpdate hook", u: "updated", bum: "beforeUnmount hook", um: "unmounted hook", a: "activated hook", da: "deactivated hook", ec: "errorCaptured hook", rtc: "renderTracked hook", rtg: "renderTriggered hook", 0: "setup function", 1: "render function", 2: "watcher getter", 3: "watcher callback", 4: "watcher cleanup function", 5: "native event handler", 6: "component event handler", 7: "vnode hook", 8: "directive hook", 9: "transition hook", 10: "app errorHandler", 11: "app warnHandler", 12: "ref function", 13: "async component loader", 14: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core" };
function callWithErrorHandling(a, d, e, b) {
  let c;
  try {
    c = b ? a(...b) : a();
  } catch (f) {
    handleError(f, d, e);
  }
  return c;
}
function callWithAsyncErrorHandling(a, d, e, f) {
  if (isFunction(a)) {
    let b = callWithErrorHandling(a, d, e, f);
    return b && isPromise(b) && b.catch((a2) => {
      handleError(a2, d, e);
    }), b;
  }
  let g = [];
  for (let c = 0; c < a.length; c++)
    g.push(callWithAsyncErrorHandling(a[c], d, e, f));
  return g;
}
function handleError(c, a, d, k = true) {
  let l = a ? a.vnode : null;
  if (a) {
    let b = a.parent, g = a.proxy, i = true ? ErrorTypeStrings[d] : d;
    for (; b; ) {
      let e = b.ec;
      if (e) {
        for (let f = 0; f < e.length; f++)
          if (false === e[f](c, g, i))
            return;
      }
      b = b.parent;
    }
    let j = a.appContext.config.errorHandler;
    if (j) {
      callWithErrorHandling(j, null, 10, [c, g, i]);
      return;
    }
  }
  logError(c, d, l, k);
}
function logError(a, d, b, e = true) {
  if (true) {
    let c = ErrorTypeStrings[d];
    if (b && pushWarningContext(b), warn2(`Unhandled error${c ? ` during execution of ${c}` : ""}`), b && popWarningContext(), e)
      throw a;
    console.error(a);
  } else
    console.error(a);
}
var isFlushing = false;
var isFlushPending = false;
var queue = [];
var flushIndex = 0;
var pendingPreFlushCbs = [];
var activePreFlushCbs = null;
var preFlushIndex = 0;
var pendingPostFlushCbs = [];
var activePostFlushCbs = null;
var postFlushIndex = 0;
var resolvedPromise = Promise.resolve();
var currentFlushPromise = null;
var currentPreFlushParentJob = null;
function nextTick(a) {
  let b = currentFlushPromise || resolvedPromise;
  return a ? b.then(this ? a.bind(this) : a) : b;
}
function findInsertionIndex(d) {
  let a = flushIndex + 1, b = queue.length;
  for (; a < b; ) {
    let c = a + b >>> 1, e = getId(queue[c]);
    e < d ? a = c + 1 : b = c;
  }
  return a;
}
function queueJob(a) {
  queue.length && queue.includes(a, isFlushing && a.allowRecurse ? flushIndex + 1 : flushIndex) || a === currentPreFlushParentJob || (null == a.id ? queue.push(a) : queue.splice(findInsertionIndex(a.id), 0, a), queueFlush());
}
function queueFlush() {
  isFlushing || isFlushPending || (isFlushPending = true, currentFlushPromise = resolvedPromise.then(flushJobs));
}
function invalidateJob(b) {
  let a = queue.indexOf(b);
  a > flushIndex && queue.splice(a, 1);
}
function queueCb(a, b, c, d) {
  isArray(a) ? c.push(...a) : b && b.includes(a, a.allowRecurse ? d + 1 : d) || c.push(a), queueFlush();
}
function queuePreFlushCb(a) {
  queueCb(a, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(a) {
  queueCb(a, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(a, b = null) {
  if (pendingPreFlushCbs.length) {
    for (currentPreFlushParentJob = b, activePreFlushCbs = [...new Set(pendingPreFlushCbs)], pendingPreFlushCbs.length = 0, a = a || /* @__PURE__ */ new Map(), preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++)
      checkRecursiveUpdates(a, activePreFlushCbs[preFlushIndex]) || activePreFlushCbs[preFlushIndex]();
    activePreFlushCbs = null, preFlushIndex = 0, currentPreFlushParentJob = null, flushPreFlushCbs(a, b);
  }
}
function flushPostFlushCbs(a) {
  if (flushPreFlushCbs(), pendingPostFlushCbs.length) {
    let b = [...new Set(pendingPostFlushCbs)];
    if (pendingPostFlushCbs.length = 0, activePostFlushCbs) {
      activePostFlushCbs.push(...b);
      return;
    }
    for (activePostFlushCbs = b, a = a || /* @__PURE__ */ new Map(), activePostFlushCbs.sort((a2, b2) => getId(a2) - getId(b2)), postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++)
      checkRecursiveUpdates(a, activePostFlushCbs[postFlushIndex]) || activePostFlushCbs[postFlushIndex]();
    activePostFlushCbs = null, postFlushIndex = 0;
  }
}
var getId = (a) => null == a.id ? 1 / 0 : a.id;
function flushJobs(a) {
  isFlushPending = false, isFlushing = true, a = a || /* @__PURE__ */ new Map(), flushPreFlushCbs(a), queue.sort((a2, b) => getId(a2) - getId(b));
  let c = true ? (b) => checkRecursiveUpdates(a, b) : NOOP;
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      let b = queue[flushIndex];
      if (b && false !== b.active) {
        if (c(b))
          continue;
        callWithErrorHandling(b, null, 14);
      }
    }
  } finally {
    flushIndex = 0, queue.length = 0, flushPostFlushCbs(a), isFlushing = false, currentFlushPromise = null, (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) && flushJobs(a);
  }
}
function checkRecursiveUpdates(b, a) {
  if (b.has(a)) {
    let c = b.get(a);
    if (c > 100) {
      let d = a.ownerInstance, e = d && getComponentName(d.type);
      return warn2(`Maximum recursive updates exceeded${e ? ` in component <${e}>` : ""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`), true;
    }
    b.set(a, c + 1);
  } else
    b.set(a, 1);
}
var isHmrUpdating = false;
var hmrDirtyComponents = /* @__PURE__ */ new Set();
getGlobalThis().__VUE_HMR_RUNTIME__ = { createRecord: tryWrap(createRecord), rerender: tryWrap(rerender), reload: tryWrap(reload) };
var map = /* @__PURE__ */ new Map();
function registerHMR(a) {
  let b = a.type.__hmrId, c = map.get(b);
  c || (createRecord(b, a.type), c = map.get(b)), c.instances.add(a);
}
function unregisterHMR(a) {
  map.get(a.type.__hmrId).instances.delete(a);
}
function createRecord(a, b) {
  return !map.has(a) && (map.set(a, { initialDef: normalizeClassComponent(b), instances: /* @__PURE__ */ new Set() }), true);
}
function normalizeClassComponent(a) {
  return isClassComponent(a) ? a.__vccOpts : a;
}
function rerender(b, c) {
  let a = map.get(b);
  a && (a.initialDef.render = c, [...a.instances].forEach((a2) => {
    c && (a2.render = c, normalizeClassComponent(a2.type).render = c), a2.renderCache = [], isHmrUpdating = true, a2.update(), isHmrUpdating = false;
  }));
}
function reload(e, b) {
  let d = map.get(e);
  if (!d)
    return;
  b = normalizeClassComponent(b), updateComponentDef(d.initialDef, b);
  let f = [...d.instances];
  for (let a of f) {
    let c = normalizeClassComponent(a.type);
    hmrDirtyComponents.has(c) || (c !== d.initialDef && updateComponentDef(c, b), hmrDirtyComponents.add(c)), a.appContext.optionsCache.delete(a.type), a.ceReload ? (hmrDirtyComponents.add(c), a.ceReload(b.styles), hmrDirtyComponents.delete(c)) : a.parent ? (queueJob(a.parent.update), a.parent.type.__asyncLoader && a.parent.ceReload && a.parent.ceReload(b.styles)) : a.appContext.reload ? a.appContext.reload() : "undefined" != typeof window ? window.location.reload() : console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
  }
  queuePostFlushCb(() => {
    for (let a of f)
      hmrDirtyComponents.delete(normalizeClassComponent(a.type));
  });
}
function updateComponentDef(b, d) {
  for (let c in extend(b, d), b)
    "__file" === c || c in d || delete b[c];
}
function tryWrap(a) {
  return (b, c) => {
    try {
      return a(b, c);
    } catch (d) {
      console.error(d), console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.");
    }
  };
}
var devtools;
var buffer = [];
var devtoolsNotInstalled = false;
function emit(a, ...b) {
  devtools ? devtools.emit(a, ...b) : devtoolsNotInstalled || buffer.push({ event: a, args: b });
}
function setDevtoolsHook(d, c) {
  var a, b;
  if (devtools = d)
    devtools.enabled = true, buffer.forEach(({ event: a2, args: b2 }) => devtools.emit(a2, ...b2)), buffer = [];
  else if ("undefined" == typeof window || !window.HTMLElement || (null === (b = null === (a = window.navigator) || void 0 === a ? void 0 : a.userAgent) || void 0 === b ? void 0 : b.includes("jsdom")))
    devtoolsNotInstalled = true, buffer = [];
  else {
    let e = c.__VUE_DEVTOOLS_HOOK_REPLAY__ = c.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    e.push((a2) => {
      setDevtoolsHook(a2, c);
    }), setTimeout(() => {
      devtools || (c.__VUE_DEVTOOLS_HOOK_REPLAY__ = null, devtoolsNotInstalled = true, buffer = []);
    }, 3e3);
  }
}
function devtoolsInitApp(a, b) {
  emit("app:init", a, b, { Fragment, Text, Comment, Static });
}
function devtoolsUnmountApp(a) {
  emit("app:unmount", a);
}
var devtoolsComponentAdded = createDevtoolsComponentHook("component:added");
var devtoolsComponentUpdated = createDevtoolsComponentHook("component:updated");
var devtoolsComponentRemoved = createDevtoolsComponentHook("component:removed");
function createDevtoolsComponentHook(a) {
  return (b) => {
    emit(a, b.appContext.app, b.uid, b.parent ? b.parent.uid : void 0, b);
  };
}
var devtoolsPerfStart = createDevtoolsPerformanceHook("perf:start");
var devtoolsPerfEnd = createDevtoolsPerformanceHook("perf:end");
function createDevtoolsPerformanceHook(a) {
  return (b, c, d) => {
    emit(a, b.appContext.app, b.uid, b, c, d);
  };
}
function devtoolsComponentEmit(a, b, c) {
  emit("component:emit", a.appContext.app, a, b, c);
}
function emit$1(b, a, ...f) {
  if (b.isUnmounted)
    return;
  let c = b.vnode.props || EMPTY_OBJ;
  if (true) {
    let { emitsOptions: j, propsOptions: [l] } = b;
    if (j) {
      if (a in j) {
        let m = j[a];
        if (isFunction(m)) {
          let p2 = m(...f);
          p2 || warn2(`Invalid event arguments: event validation failed for event "${a}".`);
        }
      } else
        l && toHandlerKey(a) in l || warn2(`Component emitted event "${a}" but it is neither declared in the emits option nor as an "${toHandlerKey(a)}" prop.`);
    }
  }
  let e = f, n = a.startsWith("update:"), g = n && a.slice(7);
  if (g && g in c) {
    let q = `${"modelValue" === g ? "model" : g}Modifiers`, { number: r, trim: s } = c[q] || EMPTY_OBJ;
    s && (e = f.map((a2) => a2.trim())), r && (e = f.map(toNumber));
  }
  if (devtoolsComponentEmit(b, a, e), true) {
    let k = a.toLowerCase();
    k !== a && c[toHandlerKey(k)] && warn2(`Event "${k}" is emitted in component ${formatComponentName(b, b.type)} but the handler is registered for "${a}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(a)}" instead of "${a}".`);
  }
  let d, i = c[d = toHandlerKey(a)] || c[d = toHandlerKey(camelize(a))];
  !i && n && (i = c[d = toHandlerKey(hyphenate(a))]), i && callWithAsyncErrorHandling(i, b, 6, e);
  let o = c[d + "Once"];
  if (o) {
    if (b.emitted) {
      if (b.emitted[d])
        return;
    } else
      b.emitted = {};
    b.emitted[d] = true, callWithAsyncErrorHandling(o, b, 6, e);
  }
}
function normalizeEmitsOptions(b, d, j = false) {
  let e = d.emitsCache, i = e.get(b);
  if (void 0 !== i)
    return i;
  let c = b.emits, f = {}, k = false;
  if (__VUE_OPTIONS_API__ && !isFunction(b)) {
    let g = (c2) => {
      let b2 = normalizeEmitsOptions(c2, d, true);
      b2 && (k = true, extend(f, b2));
    };
    !j && d.mixins.length && d.mixins.forEach(g), b.extends && g(b.extends), b.mixins && b.mixins.forEach(g);
  }
  return c || k ? (isArray(c) ? c.forEach((a) => f[a] = null) : extend(f, c), e.set(b, f), f) : (e.set(b, null), null);
}
function isEmitListener(b, a) {
  return !!(b && isOn(a)) && (hasOwn(b, (a = a.slice(2).replace(/Once$/, ""))[0].toLowerCase() + a.slice(1)) || hasOwn(b, hyphenate(a)) || hasOwn(b, a));
}
var currentRenderingInstance = null;
var currentScopeId = null;
function setCurrentRenderingInstance(a) {
  let b = currentRenderingInstance;
  return currentRenderingInstance = a, currentScopeId = a && a.type.__scopeId || null, b;
}
function pushScopeId(a) {
  currentScopeId = a;
}
function popScopeId() {
  currentScopeId = null;
}
var withScopeId = (a) => withCtx;
function withCtx(b, c = currentRenderingInstance, d) {
  if (!c || b._n)
    return b;
  let a = (...d2) => {
    a._d && setBlockTracking(-1);
    let e = setCurrentRenderingInstance(c), f = b(...d2);
    return setCurrentRenderingInstance(e), a._d && setBlockTracking(1), devtoolsComponentUpdated(c), f;
  };
  return a._n = true, a._c = true, a._d = true, a;
}
var accessedAttrs = false;
function markAttrsAccessed() {
  accessedAttrs = true;
}
function renderComponentRoot(g) {
  let { type: n, vnode: e, proxy: v, withProxy: w, props: i, propsOptions: [o], slots: p2, attrs: c, emit: q, render: x, renderCache: y, data: z, setupState: A, ctx: B, inheritAttrs: C } = g, b, d, D = setCurrentRenderingInstance(g);
  accessedAttrs = false;
  try {
    if (4 & e.shapeFlag) {
      let r = w || v;
      b = normalizeVNode(x.call(r, r, y, i, A, z, B)), d = c;
    } else {
      let s = n;
      c === i && markAttrsAccessed(), b = normalizeVNode(s(i, s.length > 1 ? true ? { get attrs() {
        return markAttrsAccessed(), c;
      }, slots: p2, emit: q } : { attrs: c, slots: p2, emit: q } : null)), d = n.props ? c : getFunctionalFallthrough(c);
    }
  } catch (E) {
    blockStack.length = 0, handleError(E, g, 1), b = createVNode(Comment);
  }
  let a = b, j;
  if (b.patchFlag > 0 && 2048 & b.patchFlag && ([a, j] = getChildRoot(b)), d && false !== C) {
    let t = Object.keys(d), { shapeFlag: F } = a;
    if (t.length) {
      if (7 & F)
        o && t.some(isModelListener) && (d = filterModelListeners(d, o)), a = cloneVNode(a, d);
      else if (!accessedAttrs && a.type !== Comment) {
        let u = Object.keys(c), k = [], l = [];
        for (let m = 0, G = u.length; m < G; m++) {
          let f = u[m];
          isOn(f) ? isModelListener(f) || k.push(f[2].toLowerCase() + f.slice(3)) : l.push(f);
        }
        l.length && warn2(`Extraneous non-props attributes (${l.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`), k.length && warn2(`Extraneous non-emits event listeners (${k.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`);
      }
    }
  }
  return e.dirs && (isElementRoot(a) || warn2("Runtime directive used on component with non-element root node. The directives will not function as intended."), (a = cloneVNode(a)).dirs = a.dirs ? a.dirs.concat(e.dirs) : e.dirs), e.transition && (isElementRoot(a) || warn2("Component inside <Transition> renders non-element root node that cannot be animated."), a.transition = e.transition), j ? j(a) : b = a, setCurrentRenderingInstance(D), b;
}
var getChildRoot = (b) => {
  let c = b.children, d = b.dynamicChildren, a = filterSingleRoot(c);
  if (!a)
    return [b, void 0];
  let f = c.indexOf(a), g = d ? d.indexOf(a) : -1, e = (a2) => {
    c[f] = a2, d && (g > -1 ? d[g] = a2 : a2.patchFlag > 0 && (b.dynamicChildren = [...d, a2]));
  };
  return [normalizeVNode(a), e];
};
function filterSingleRoot(d) {
  let b;
  for (let c = 0; c < d.length; c++) {
    let a = d[c];
    if (!isVNode(a))
      return;
    if (a.type !== Comment || "v-if" === a.children) {
      if (b)
        return;
      b = a;
    }
  }
  return b;
}
var getFunctionalFallthrough = (c) => {
  let b;
  for (let a in c)
    ("class" === a || "style" === a || isOn(a)) && ((b || (b = {}))[a] = c[a]);
  return b;
};
var filterModelListeners = (b, d) => {
  let c = {};
  for (let a in b)
    isModelListener(a) && a.slice(9) in d || (c[a] = b[a]);
  return c;
};
var isElementRoot = (a) => 7 & a.shapeFlag || a.type === Comment;
function shouldUpdateComponent(l, c, m) {
  let { props: b, children: j, component: n } = l, { props: a, children: d, patchFlag: e } = c, f = n.emitsOptions;
  if ((j || d) && isHmrUpdating || c.dirs || c.transition)
    return true;
  if (!m || !(e >= 0))
    return (!!j || !!d) && (!d || !d.$stable) || b !== a && (b ? !a || hasPropsChanged(b, a, f) : !!a);
  if (1024 & e)
    return true;
  if (16 & e)
    return b ? hasPropsChanged(b, a, f) : !!a;
  if (8 & e) {
    let k = c.dynamicProps;
    for (let g = 0; g < k.length; g++) {
      let i = k[g];
      if (a[i] !== b[i] && !isEmitListener(f, i))
        return true;
    }
  }
  return false;
}
function hasPropsChanged(d, e, f) {
  let a = Object.keys(e);
  if (a.length !== Object.keys(d).length)
    return true;
  for (let b = 0; b < a.length; b++) {
    let c = a[b];
    if (e[c] !== d[c] && !isEmitListener(f, c))
      return true;
  }
  return false;
}
function updateHOCHostEl({ vnode: b, parent: a }, c) {
  for (; a && a.subTree === b; )
    (b = a.vnode).el = c, a = a.parent;
}
var isSuspense = (a) => a.__isSuspense;
var SuspenseImpl = { name: "Suspense", __isSuspense: true, process(a, b, c, d, e, k, f, g, i, j) {
  null == a ? mountSuspense(b, c, d, e, k, f, g, i, j) : patchSuspense(a, b, c, d, e, f, g, i, j);
}, hydrate: hydrateSuspense, create: createSuspenseBoundary, normalize: normalizeSuspenseChildren };
var Suspense = SuspenseImpl;
function triggerEvent(a, c) {
  let b = a.props && a.props[c];
  isFunction(b) && b();
}
function mountSuspense(a, f, g, c, l, d, e, m, i) {
  let { p: j, o: { createElement: n } } = i, k = n("div"), b = a.suspense = createSuspenseBoundary(a, l, c, f, k, g, d, e, m, i);
  j(null, b.pendingBranch = a.ssContent, k, null, c, b, d, e), b.deps > 0 ? (triggerEvent(a, "onPending"), triggerEvent(a, "onFallback"), j(null, a.ssFallback, f, g, c, null, d, e), setActiveBranch(b, a.ssFallback)) : b.resolve();
}
function patchSuspense(p2, j, m, n, c, d, e, f, { p: g, um: r, o: { createElement: s } }) {
  let a = j.suspense = p2.suspense;
  a.vnode = j, j.el = p2.el;
  let b = j.ssContent, k = j.ssFallback, { activeBranch: i, pendingBranch: l, isInFallback: q, isHydrating: t } = a;
  if (l)
    a.pendingBranch = b, isSameVNodeType(b, l) ? (g(l, b, a.hiddenContainer, null, c, a, d, e, f), a.deps <= 0 ? a.resolve() : q && (g(i, k, m, n, c, null, d, e, f), setActiveBranch(a, k))) : (a.pendingId++, t ? (a.isHydrating = false, a.activeBranch = l) : r(l, c, a), a.deps = 0, a.effects.length = 0, a.hiddenContainer = s("div"), q ? (g(null, b, a.hiddenContainer, null, c, a, d, e, f), a.deps <= 0 ? a.resolve() : (g(i, k, m, n, c, null, d, e, f), setActiveBranch(a, k))) : i && isSameVNodeType(b, i) ? (g(i, b, m, n, c, a, d, e, f), a.resolve(true)) : (g(null, b, a.hiddenContainer, null, c, a, d, e, f), a.deps <= 0 && a.resolve()));
  else if (i && isSameVNodeType(b, i))
    g(i, b, m, n, c, a, d, e, f), setActiveBranch(a, b);
  else if (triggerEvent(j, "onPending"), a.pendingBranch = b, a.pendingId++, g(null, b, a.hiddenContainer, null, c, a, d, e, f), a.deps <= 0)
    a.resolve();
  else {
    let { timeout: o, pendingId: u } = a;
    o > 0 ? setTimeout(() => {
      a.pendingId === u && a.fallback(k);
    }, o) : 0 === o && a.fallback(k);
  }
}
var hasWarned = false;
function createSuspenseBoundary(a, c, d, e, f, g, i, m, n, j, k = false) {
  hasWarned || (hasWarned = true, console[console.info ? "info" : "log"]("<Suspense> is an experimental feature and its API will likely change."));
  let { p: o, m: p2, um: q, n: r, o: { parentNode: s, remove: t } } = j, b = toNumber(a.props && a.props.timeout), l = { vnode: a, parent: c, parentComponent: d, isSVG: i, container: e, hiddenContainer: f, anchor: g, deps: 0, pendingId: 0, timeout: "number" == typeof b ? b : -1, activeBranch: null, pendingBranch: null, isInFallback: true, isHydrating: k, isUnmounted: false, effects: [], resolve(d2 = false) {
    if (true) {
      if (!d2 && !l.pendingBranch)
        throw new Error("suspense.resolve() is called without a pending branch.");
      if (l.isUnmounted)
        throw new Error("suspense.resolve() is called on an already unmounted suspense boundary.");
    }
    let { vnode: j2, activeBranch: a2, pendingBranch: c2, pendingId: n2, effects: e2, parentComponent: k2, container: m2 } = l;
    if (l.isHydrating)
      l.isHydrating = false;
    else if (!d2) {
      let f2 = a2 && c2.transition && "out-in" === c2.transition.mode;
      f2 && (a2.transition.afterLeave = () => {
        n2 === l.pendingId && p2(c2, m2, g2, 0);
      });
      let { anchor: g2 } = l;
      a2 && (g2 = r(a2), q(a2, k2, l, true)), f2 || p2(c2, m2, g2, 0);
    }
    setActiveBranch(l, c2), l.pendingBranch = null, l.isInFallback = false;
    let b2 = l.parent, i2 = false;
    for (; b2; ) {
      if (b2.pendingBranch) {
        b2.effects.push(...e2), i2 = true;
        break;
      }
      b2 = b2.parent;
    }
    i2 || queuePostFlushCb(e2), l.effects = [], triggerEvent(j2, "onResolve");
  }, fallback(b2) {
    if (!l.pendingBranch)
      return;
    let { vnode: e2, activeBranch: a2, parentComponent: f2, container: g2, isSVG: i2 } = l;
    triggerEvent(e2, "onFallback");
    let j2 = r(a2), c2 = () => {
      l.isInFallback && (o(null, b2, g2, j2, f2, null, i2, m, n), setActiveBranch(l, b2));
    }, d2 = b2.transition && "out-in" === b2.transition.mode;
    d2 && (a2.transition.afterLeave = c2), l.isInFallback = true, q(a2, f2, null, true), d2 || c2();
  }, move(a2, b2, c2) {
    l.activeBranch && p2(l.activeBranch, a2, b2, c2), l.container = a2;
  }, next: () => l.activeBranch && r(l.activeBranch), registerDep(a2, c2) {
    let b2 = !!l.pendingBranch;
    b2 && l.deps++;
    let d2 = a2.vnode.el;
    a2.asyncDep.catch((b3) => {
      handleError(b3, a2, 0);
    }).then((g2) => {
      if (a2.isUnmounted || l.isUnmounted || l.pendingId !== a2.suspenseId)
        return;
      a2.asyncResolved = true;
      let { vnode: e2 } = a2;
      pushWarningContext(e2), handleSetupResult(a2, g2, false), d2 && (e2.el = d2);
      let f2 = !d2 && a2.subTree.el;
      c2(a2, e2, s(d2 || a2.subTree.el), d2 ? null : r(a2.subTree), l, i, n), f2 && t(f2), updateHOCHostEl(a2, e2.el), popWarningContext(), b2 && 0 == --l.deps && l.resolve();
    });
  }, unmount(a2, b2) {
    l.isUnmounted = true, l.activeBranch && q(l.activeBranch, d, a2, b2), l.pendingBranch && q(l.pendingBranch, d, a2, b2);
  } };
  return l;
}
function hydrateSuspense(c, b, d, g, i, e, f, j, k) {
  let a = b.suspense = createSuspenseBoundary(b, g, d, c.parentNode, document.createElement("div"), null, i, e, f, j, true), l = k(c, a.pendingBranch = b.ssContent, d, a, e, f);
  return 0 === a.deps && a.resolve(), l;
}
function normalizeSuspenseChildren(a) {
  let { shapeFlag: d, children: b } = a, c = 32 & d;
  a.ssContent = normalizeSuspenseSlot(c ? b.default : b), a.ssFallback = c ? normalizeSuspenseSlot(b.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(a) {
  let b;
  if (isFunction(a)) {
    let c = isBlockTreeEnabled && a._c;
    c && (a._d = false, openBlock()), a = a(), c && (a._d = true, b = currentBlock, closeBlock());
  }
  if (isArray(a)) {
    let d = filterSingleRoot(a);
    d || warn2("<Suspense> slots expect a single root node."), a = d;
  }
  return a = normalizeVNode(a), b && !a.dynamicChildren && (a.dynamicChildren = b.filter((b2) => b2 !== a)), a;
}
function queueEffectWithSuspense(a, b) {
  b && b.pendingBranch ? isArray(a) ? b.effects.push(...a) : b.effects.push(a) : queuePostFlushCb(a);
}
function setActiveBranch(b, c) {
  b.activeBranch = c;
  let { vnode: d, parentComponent: a } = b, e = d.el = c.el;
  a && a.subTree === d && (a.vnode.el = e, updateHOCHostEl(a, e));
}
function provide(c, d) {
  if (currentInstance) {
    let a = currentInstance.provides, b = currentInstance.parent && currentInstance.parent.provides;
    b === a && (a = currentInstance.provides = Object.create(b)), a[c] = d;
  } else
    warn2("provide() can only be used inside setup().");
}
function inject(b, c, e = false) {
  let a = currentInstance || currentRenderingInstance;
  if (a) {
    let d = null == a.parent ? a.vnode.appContext && a.vnode.appContext.provides : a.parent.provides;
    if (d && b in d)
      return d[b];
    if (arguments.length > 1)
      return e && isFunction(c) ? c.call(a.proxy) : c;
    warn2(`injection "${String(b)}" not found.`);
  } else
    warn2("inject() can only be used inside setup() or functional components.");
}
function watchEffect(a, b) {
  return doWatch(a, null, b);
}
function watchPostEffect(a, b) {
  return doWatch(a, null, true ? Object.assign(Object.assign({}, b), { flush: "post" }) : { flush: "post" });
}
function watchSyncEffect(a, b) {
  return doWatch(a, null, true ? Object.assign(Object.assign({}, b), { flush: "sync" }) : { flush: "sync" });
}
var INITIAL_WATCHER_VALUE = {};
function watch(b, a, c) {
  return isFunction(a) || warn2("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."), doWatch(b, a, c);
}
function doWatch(b, c, { immediate: e, deep: g, flush: l, onTrack: s, onTrigger: t } = EMPTY_OBJ) {
  c || (void 0 !== e && warn2('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'), void 0 !== g && warn2('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'));
  let u = (a2) => {
    warn2("Invalid watch source: ", a2, "A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.");
  }, m = currentInstance, a, p2 = false, n = false;
  if (isRef(b) ? (a = () => b.value, p2 = isShallow(b)) : isReactive(b) ? (a = () => b, g = true) : isArray(b) ? (n = true, p2 = b.some((a2) => isReactive(a2) || isShallow(a2)), a = () => b.map((a2) => isRef(a2) ? a2.value : isReactive(a2) ? traverse(a2) : isFunction(a2) ? callWithErrorHandling(a2, m, 2) : void u(a2))) : isFunction(b) ? a = c ? () => callWithErrorHandling(b, m, 2) : () => {
    if (!m || !m.isUnmounted)
      return x && x(), callWithAsyncErrorHandling(b, m, 3, [q]);
  } : (a = NOOP, u(b)), c && g) {
    let w = a;
    a = () => traverse(w());
  }
  let x, q = (a2) => {
    x = d.onStop = () => {
      callWithErrorHandling(a2, m, 4);
    };
  };
  if (isInSSRComponentSetup)
    return q = NOOP, c ? e && callWithAsyncErrorHandling(c, m, 3, [a(), n ? [] : void 0, q]) : a(), NOOP;
  let v = n ? [] : INITIAL_WATCHER_VALUE, o = () => {
    if (d.active) {
      if (c) {
        let a2 = d.run();
        (g || p2 || (n ? a2.some((a3, b2) => hasChanged(a3, v[b2])) : hasChanged(a2, v))) && (x && x(), callWithAsyncErrorHandling(c, m, 3, [a2, v === INITIAL_WATCHER_VALUE ? void 0 : v, q]), v = a2);
      } else
        d.run();
    }
  };
  o.allowRecurse = !!c;
  let r;
  r = "sync" === l ? o : "post" === l ? () => queuePostRenderEffect(o, m && m.suspense) : () => queuePreFlushCb(o);
  let d = new ReactiveEffect(a, r);
  return d.onTrack = s, d.onTrigger = t, c ? e ? o() : v = d.run() : "post" === l ? queuePostRenderEffect(d.run.bind(d), m && m.suspense) : d.run(), () => {
    d.stop(), m && m.scope && remove(m.scope.effects, d);
  };
}
function instanceWatch(a, b, e) {
  let c = this.proxy, g = isString(a) ? a.includes(".") ? createPathGetter(c, a) : () => c[a] : a.bind(c, c), d;
  isFunction(b) ? d = b : (d = b.handler, e = b);
  let f = currentInstance;
  setCurrentInstance(this);
  let i = doWatch(g, d.bind(c), e);
  return f ? setCurrentInstance(f) : unsetCurrentInstance(), i;
}
function createPathGetter(b, a) {
  let c = a.split(".");
  return () => {
    let a2 = b;
    for (let d = 0; d < c.length && a2; d++)
      a2 = a2[c[d]];
    return a2;
  };
}
function traverse(a, b) {
  if (!isObject(a) || a["__v_skip"] || (b = b || /* @__PURE__ */ new Set()).has(a))
    return a;
  if (b.add(a), isRef(a))
    traverse(a.value, b);
  else if (isArray(a))
    for (let c = 0; c < a.length; c++)
      traverse(a[c], b);
  else if (isSet(a) || isMap(a))
    a.forEach((a2) => {
      traverse(a2, b);
    });
  else if (isPlainObject(a))
    for (let d in a)
      traverse(a[d], b);
  return a;
}
function useTransitionState() {
  let a = { isMounted: false, isLeaving: false, isUnmounting: false, leavingVNodes: /* @__PURE__ */ new Map() };
  return onMounted(() => {
    a.isMounted = true;
  }), onBeforeUnmount(() => {
    a.isUnmounting = true;
  }), a;
}
var TransitionHookValidator = [Function, Array];
var BaseTransitionImpl = { name: "BaseTransition", props: { mode: String, appear: Boolean, persisted: Boolean, onBeforeEnter: TransitionHookValidator, onEnter: TransitionHookValidator, onAfterEnter: TransitionHookValidator, onEnterCancelled: TransitionHookValidator, onBeforeLeave: TransitionHookValidator, onLeave: TransitionHookValidator, onAfterLeave: TransitionHookValidator, onLeaveCancelled: TransitionHookValidator, onBeforeAppear: TransitionHookValidator, onAppear: TransitionHookValidator, onAfterAppear: TransitionHookValidator, onAppearCancelled: TransitionHookValidator }, setup(a, { slots: b }) {
  let c = getCurrentInstance(), d = useTransitionState(), e;
  return () => {
    let k = b.default && getTransitionRawChildren(b.default(), true);
    if (!k || !k.length)
      return;
    let i = k[0];
    if (k.length > 1) {
      let p2 = false;
      for (let q of k)
        if (q.type !== Comment) {
          if (p2) {
            warn2("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
            break;
          }
          if (i = q, p2 = true, false)
            break;
        }
    }
    let m = toRaw(a), { mode: f } = m;
    if (f && "in-out" !== f && "out-in" !== f && "default" !== f && warn2(`invalid <transition> mode: ${f}`), d.isLeaving)
      return emptyPlaceholder(i);
    let j = getKeepAliveChild(i);
    if (!j)
      return emptyPlaceholder(i);
    let u = resolveTransitionHooks(j, m, d, c);
    setTransitionHooks(j, u);
    let r = c.subTree, l = r && getKeepAliveChild(r), s = false, { getTransitionKey: t } = j.type;
    if (t) {
      let n = t();
      void 0 === e ? e = n : n !== e && (e = n, s = true);
    }
    if (l && l.type !== Comment && (!isSameVNodeType(j, l) || s)) {
      let o = resolveTransitionHooks(l, m, d, c);
      if (setTransitionHooks(l, o), "out-in" === f)
        return d.isLeaving = true, o.afterLeave = () => {
          d.isLeaving = false, c.update();
        }, emptyPlaceholder(i);
      "in-out" === f && j.type !== Comment && (o.delayLeave = (a2, e2, b2) => {
        let c2 = getLeavingNodesForType(d, l);
        c2[String(l.key)] = l, a2._leaveCb = () => {
          e2(), a2._leaveCb = void 0, delete u.delayedLeave;
        }, u.delayedLeave = b2;
      });
    }
    return i;
  };
} };
var BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(d, b) {
  let { leavingVNodes: c } = d, a = c.get(b.type);
  return a || (a = /* @__PURE__ */ Object.create(null), c.set(b.type, a)), a;
}
function resolveTransitionHooks(a, b, c, g) {
  let { appear: i, mode: d, persisted: e = false, onBeforeEnter: j, onEnter: k, onAfterEnter: l, onEnterCancelled: m, onBeforeLeave: n, onLeave: o, onAfterLeave: p2, onLeaveCancelled: q, onBeforeAppear: r, onAppear: s, onAfterAppear: t, onAppearCancelled: u } = b, v = String(a.key), w = getLeavingNodesForType(c, a), x = (a2, b2) => {
    a2 && callWithAsyncErrorHandling(a2, g, 9, b2);
  }, y = (a2, b2) => {
    let c2 = b2[1];
    x(a2, b2), isArray(a2) ? a2.every((a3) => a3.length <= 1) && c2() : a2.length <= 1 && c2();
  }, f = { mode: d, persisted: e, beforeEnter(d2) {
    let e2 = j;
    if (!c.isMounted) {
      if (!i)
        return;
      e2 = r || j;
    }
    d2._leaveCb && d2._leaveCb(true);
    let b2 = w[v];
    b2 && isSameVNodeType(a, b2) && b2.el._leaveCb && b2.el._leaveCb(), x(e2, [d2]);
  }, enter(b2) {
    let a2 = k, e2 = l, g2 = m;
    if (!c.isMounted) {
      if (!i)
        return;
      a2 = s || k, e2 = t || l, g2 = u || m;
    }
    let j2 = false, d2 = b2._enterCb = (a3) => {
      j2 || (j2 = true, a3 ? x(g2, [b2]) : x(e2, [b2]), f.delayedLeave && f.delayedLeave(), b2._enterCb = void 0);
    };
    a2 ? y(a2, [b2, d2]) : d2();
  }, leave(b2, e2) {
    let f2 = String(a.key);
    if (b2._enterCb && b2._enterCb(true), c.isUnmounting)
      return e2();
    x(n, [b2]);
    let g2 = false, d2 = b2._leaveCb = (c2) => {
      g2 || (g2 = true, e2(), c2 ? x(q, [b2]) : x(p2, [b2]), b2._leaveCb = void 0, w[f2] !== a || delete w[f2]);
    };
    w[f2] = a, o ? y(o, [b2, d2]) : d2();
  }, clone: (a2) => resolveTransitionHooks(a2, b, c, g) };
  return f;
}
function emptyPlaceholder(a) {
  if (isKeepAlive(a))
    return (a = cloneVNode(a)).children = null, a;
}
function getKeepAliveChild(a) {
  return isKeepAlive(a) ? a.children ? a.children[0] : void 0 : a;
}
function setTransitionHooks(a, b) {
  6 & a.shapeFlag && a.component ? setTransitionHooks(a.component.subTree, b) : 128 & a.shapeFlag ? (a.ssContent.transition = b.clone(a.ssContent), a.ssFallback.transition = b.clone(a.ssFallback)) : a.transition = b;
}
function getTransitionRawChildren(f, g = false, i) {
  let b = [], j = 0;
  for (let c = 0; c < f.length; c++) {
    let a = f[c], d = null == i ? a.key : String(i) + String(null != a.key ? a.key : c);
    a.type === Fragment ? (128 & a.patchFlag && j++, b = b.concat(getTransitionRawChildren(a.children, g, d))) : (g || a.type !== Comment) && b.push(null != d ? cloneVNode(a, { key: d }) : a);
  }
  if (j > 1)
    for (let e = 0; e < b.length; e++)
      b[e].patchFlag = -2;
  return b;
}
function defineComponent(a) {
  return isFunction(a) ? { setup: a, name: a.name } : a;
}
var isAsyncWrapper = (a) => !!a.type.__asyncLoader;
function defineAsyncComponent(a) {
  isFunction(a) && (a = { loader: a });
  let { loader: d, loadingComponent: e, errorComponent: f, delay: g = 200, timeout: i, suspensible: j = true, onError: k } = a, m = null, b, n = 0, o = () => (n++, m = null, c()), c = () => {
    let a2;
    return m || (a2 = m = d().catch((a3) => {
      if (a3 = a3 instanceof Error ? a3 : new Error(String(a3)), k)
        return new Promise((d2, e2) => {
          let b2 = () => d2(o()), c2 = () => e2(a3);
          k(a3, b2, c2, n + 1);
        });
      throw a3;
    }).then((c2) => {
      if (a2 !== m && m)
        return m;
      if (c2 || warn2("Async component loader resolved to undefined. If you are using retry(), make sure to return its return value."), c2 && (c2.__esModule || "Module" === c2[Symbol.toStringTag]) && (c2 = c2.default), c2 && !isObject(c2) && !isFunction(c2))
        throw new Error(`Invalid async component load result: ${c2}`);
      return b = c2, c2;
    }));
  };
  return defineComponent({ name: "AsyncComponentWrapper", __asyncLoader: c, get __asyncResolved() {
    return b;
  }, setup() {
    let a2 = currentInstance;
    if (b)
      return () => createInnerComp(b, a2);
    let d2 = (b2) => {
      m = null, handleError(b2, a2, 13, !f);
    };
    if (j && a2.suspense || isInSSRComponentSetup)
      return c().then((b2) => () => createInnerComp(b2, a2)).catch((a3) => (d2(a3), () => f ? createVNode(f, { error: a3 }) : null));
    let k2 = ref(false), n2 = ref(), o2 = ref(!!g);
    return g && setTimeout(() => {
      o2.value = false;
    }, g), null != i && setTimeout(() => {
      if (!k2.value && !n2.value) {
        let a3 = new Error(`Async component timed out after ${i}ms.`);
        d2(a3), n2.value = a3;
      }
    }, i), c().then(() => {
      k2.value = true, a2.parent && isKeepAlive(a2.parent.vnode) && queueJob(a2.parent.update);
    }).catch((a3) => {
      d2(a3), n2.value = a3;
    }), () => k2.value && b ? createInnerComp(b, a2) : n2.value && f ? createVNode(f, { error: n2.value }) : e && !o2.value ? createVNode(e) : void 0;
  } });
}
function createInnerComp(b, { vnode: { ref: c, props: d, children: e, shapeFlag: f }, parent: g }) {
  let a = createVNode(b, d, e);
  return a.ref = c, a;
}
var isKeepAlive = (a) => a.type.__isKeepAlive;
var KeepAliveImpl = { name: "KeepAlive", __isKeepAlive: true, props: { include: [String, RegExp, Array], exclude: [String, RegExp, Array], max: [String, Number] }, setup(f, { slots: g }) {
  let b = getCurrentInstance(), a = b.ctx;
  if (!a.renderer)
    return () => {
      let a2 = g.default && g.default();
      return a2 && 1 === a2.length ? a2[0] : a2;
    };
  let d = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Set(), j = null;
  b.__v_cache = d;
  let k = b.suspense, { renderer: { p: l, m, um: n, o: { createElement: e } } } = a, o = e("div");
  function p2(a2) {
    resetShapeFlag(a2), n(a2, b, k, true);
  }
  function q(a2) {
    d.forEach((c2, d2) => {
      let b2 = getComponentName(c2.type);
      !b2 || a2 && a2(b2) || r(d2);
    });
  }
  function r(a2) {
    let b2 = d.get(a2);
    j && b2.type === j.type ? j && resetShapeFlag(j) : p2(b2), d.delete(a2), i.delete(a2);
  }
  a.activate = (a2, c2, d2, e2, f2) => {
    let b2 = a2.component;
    m(a2, c2, d2, 0, k), l(b2.vnode, a2, c2, d2, b2, k, e2, a2.slotScopeIds, f2), queuePostRenderEffect(() => {
      b2.isDeactivated = false, b2.a && invokeArrayFns(b2.a);
      let c3 = a2.props && a2.props.onVnodeMounted;
      c3 && invokeVNodeHook(c3, b2.parent, a2);
    }, k), devtoolsComponentAdded(b2);
  }, a.deactivate = (a2) => {
    let b2 = a2.component;
    m(a2, o, null, 1, k), queuePostRenderEffect(() => {
      b2.da && invokeArrayFns(b2.da);
      let c2 = a2.props && a2.props.onVnodeUnmounted;
      c2 && invokeVNodeHook(c2, b2.parent, a2), b2.isDeactivated = true;
    }, k), devtoolsComponentAdded(b2);
  }, watch(() => [f.include, f.exclude], ([a2, b2]) => {
    a2 && q((b3) => matches(a2, b3)), b2 && q((a3) => !matches(b2, a3));
  }, { flush: "post", deep: true });
  let s = null, c = () => {
    null != s && d.set(s, getInnerChild(b.subTree));
  };
  return onMounted(c), onUpdated(c), onBeforeUnmount(() => {
    d.forEach((c2) => {
      let { subTree: e2, suspense: f2 } = b, a2 = getInnerChild(e2);
      if (c2.type === a2.type) {
        resetShapeFlag(a2);
        let d2 = a2.component.da;
        d2 && queuePostRenderEffect(d2, f2);
        return;
      }
      p2(c2);
    });
  }), () => {
    if (s = null, !g.default)
      return null;
    let k2 = g.default(), b2 = k2[0];
    if (k2.length > 1)
      return warn2("KeepAlive should contain exactly one component child."), j = null, k2;
    if (!isVNode(b2) || !(4 & b2.shapeFlag) && !(128 & b2.shapeFlag))
      return j = null, b2;
    let a2 = getInnerChild(b2), m2 = a2.type, e2 = getComponentName(isAsyncWrapper(a2) ? a2.type.__asyncResolved || {} : m2), { include: n2, exclude: o2, max: p3 } = f;
    if (n2 && (!e2 || !matches(n2, e2)) || o2 && e2 && matches(o2, e2))
      return j = a2, b2;
    let c2 = null == a2.key ? m2 : a2.key, l2 = d.get(c2);
    return a2.el && (a2 = cloneVNode(a2), 128 & b2.shapeFlag && (b2.ssContent = a2)), s = c2, l2 ? (a2.el = l2.el, a2.component = l2.component, a2.transition && setTransitionHooks(a2, a2.transition), a2.shapeFlag |= 512, i.delete(c2), i.add(c2)) : (i.add(c2), p3 && i.size > parseInt(p3, 10) && r(i.values().next().value)), a2.shapeFlag |= 256, j = a2, isSuspense(b2.type) ? b2 : a2;
  };
} };
var KeepAlive = KeepAliveImpl;
function matches(a, b) {
  return isArray(a) ? a.some((a2) => matches(a2, b)) : isString(a) ? a.split(",").includes(b) : !!a.test && a.test(b);
}
function onActivated(a, b) {
  registerKeepAliveHook(a, "a", b);
}
function onDeactivated(a, b) {
  registerKeepAliveHook(a, "da", b);
}
function registerKeepAliveHook(c, d, b = currentInstance) {
  let e = c.__wdc || (c.__wdc = () => {
    let a = b;
    for (; a; ) {
      if (a.isDeactivated)
        return;
      a = a.parent;
    }
    return c();
  });
  if (injectHook(d, e, b), b) {
    let a = b.parent;
    for (; a && a.parent; )
      isKeepAlive(a.parent.vnode) && injectToKeepAliveRoot(e, d, b, a), a = a.parent;
  }
}
function injectToKeepAliveRoot(a, b, c, d) {
  let e = injectHook(b, a, d, true);
  onUnmounted(() => {
    remove(d[b], e);
  }, c);
}
function resetShapeFlag(b) {
  let a = b.shapeFlag;
  256 & a && (a -= 256), 512 & a && (a -= 512), b.shapeFlag = a;
}
function getInnerChild(a) {
  return 128 & a.shapeFlag ? a.ssContent : a;
}
function injectHook(a, f, b = currentInstance, i = false) {
  if (b) {
    let g = b[a] || (b[a] = []), c = f.__weh || (f.__weh = (...c2) => {
      if (b.isUnmounted)
        return;
      pauseTracking(), setCurrentInstance(b);
      let g2 = callWithAsyncErrorHandling(f, b, a, c2);
      return unsetCurrentInstance(), resetTracking(), g2;
    });
    return i ? g.unshift(c) : g.push(c), c;
  }
  if (true) {
    let j = toHandlerKey(ErrorTypeStrings[a].replace(/ hook$/, ""));
    warn2(`${j} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`);
  }
}
var createHook = (a) => (b, c = currentInstance) => (!isInSSRComponentSetup || "sp" === a) && injectHook(a, b, c);
var onBeforeMount = createHook("bm");
var onMounted = createHook("m");
var onBeforeUpdate = createHook("bu");
var onUpdated = createHook("u");
var onBeforeUnmount = createHook("bum");
var onUnmounted = createHook("um");
var onServerPrefetch = createHook("sp");
var onRenderTriggered = createHook("rtg");
var onRenderTracked = createHook("rtc");
function onErrorCaptured(a, b = currentInstance) {
  injectHook("ec", a, b);
}
function validateDirectiveName(a) {
  isBuiltInDirective(a) && warn2("Do not use built-in directive ids as custom directive id: " + a);
}
function withDirectives(b, e) {
  let c = currentRenderingInstance;
  if (null === c)
    return warn2("withDirectives can only be used inside render functions."), b;
  let g = getExposeProxy(c) || c.proxy, i = b.dirs || (b.dirs = []);
  for (let d = 0; d < e.length; d++) {
    let [a, f, j, k = EMPTY_OBJ] = e[d];
    isFunction(a) && (a = { mounted: a, updated: a }), a.deep && traverse(f), i.push({ dir: a, instance: g, value: f, oldValue: void 0, arg: j, modifiers: k });
  }
  return b;
}
function invokeDirectiveHook(b, c, k, l) {
  let g = b.dirs, i = c && c.dirs;
  for (let a = 0; a < g.length; a++) {
    let f = g[a];
    i && (f.oldValue = i[a].value);
    let j = f.dir[l];
    j && (pauseTracking(), callWithAsyncErrorHandling(j, k, 8, [b.el, f, b, c]), resetTracking());
  }
}
var COMPONENTS = "components";
function resolveComponent(a, b) {
  return resolveAsset(COMPONENTS, a, true, b) || a;
}
var NULL_DYNAMIC_COMPONENT = Symbol();
function resolveDynamicComponent(a) {
  return isString(a) ? resolveAsset(COMPONENTS, a, false) || a : a || NULL_DYNAMIC_COMPONENT;
}
function resolveDirective(a) {
  return resolveAsset("directives", a);
}
function resolveAsset(a, b, g = true, i = false) {
  let c = currentRenderingInstance || currentInstance;
  if (c) {
    let d = c.type;
    if (a === COMPONENTS) {
      let e = getComponentName(d, false);
      if (e && (e === b || e === camelize(b) || e === capitalize(camelize(b))))
        return d;
    }
    let f = resolve(c[a] || d[a], b) || resolve(c.appContext[a], b);
    if (!f && i)
      return d;
    if (g && !f) {
      let j = a === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : "";
      warn2(`Failed to resolve ${a.slice(0, -1)}: ${b}${j}`);
    }
    return f;
  }
  warn2(`resolve${capitalize(a.slice(0, -1))} can only be used in render() or setup().`);
}
function resolve(a, b) {
  return a && (a[b] || a[camelize(b)] || a[capitalize(camelize(b))]);
}
function renderList(a, i, g, k) {
  let b, c = g && g[k];
  if (isArray(a) || isString(a)) {
    b = new Array(a.length);
    for (let d = 0, m = a.length; d < m; d++)
      b[d] = i(a[d], d, void 0, c && c[d]);
  } else if ("number" == typeof a) {
    Number.isInteger(a) || warn2(`The v-for range expect an integer value but got ${a}.`), b = new Array(a);
    for (let e = 0; e < a; e++)
      b[e] = i(e + 1, e, void 0, c && c[e]);
  } else if (isObject(a)) {
    if (a[Symbol.iterator])
      b = Array.from(a, (b2, a2) => i(b2, a2, void 0, c && c[a2]));
    else {
      let j = Object.keys(a);
      b = new Array(j.length);
      for (let f = 0, n = j.length; f < n; f++) {
        let l = j[f];
        b[f] = i(a[l], l, f, c && c[f]);
      }
    }
  } else
    b = [];
  return g && (g[k] = b), b;
}
function createSlots(c, e) {
  for (let d = 0; d < e.length; d++) {
    let a = e[d];
    if (isArray(a))
      for (let b = 0; b < a.length; b++)
        c[a[b].name] = a[b].fn;
    else
      a && (c[a.name] = a.fn);
  }
  return c;
}
function renderSlot(e, b, f = {}, c, i) {
  if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE)
    return createVNode("slot", "default" === b ? null : { name: b }, c && c());
  let a = e[b];
  a && a.length > 1 && (warn2("SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template."), a = () => []), a && a._c && (a._d = false), openBlock();
  let g = a && ensureValidVNode(a(f)), d = createBlock(Fragment, { key: f.key || `_${b}` }, g || (c ? c() : []), g && 1 === e._ ? 64 : -2);
  return !i && d.scopeId && (d.slotScopeIds = [d.scopeId + "-s"]), a && a._c && (a._d = true), d;
}
function ensureValidVNode(a) {
  return a.some((a2) => !isVNode(a2) || !!(a2.type !== Comment && (a2.type !== Fragment || ensureValidVNode(a2.children)))) ? a : null;
}
function toHandlers(a) {
  let b = {};
  if (!isObject(a))
    return warn2("v-on with no argument expects an object value."), b;
  for (let c in a)
    b[toHandlerKey(c)] = a[c];
  return b;
}
var getPublicInstance = (a) => a ? isStatefulComponent(a) ? getExposeProxy(a) || a.proxy : getPublicInstance(a.parent) : null;
var publicPropertiesMap = extend(/* @__PURE__ */ Object.create(null), { $: (a) => a, $el: (a) => a.vnode.el, $data: (a) => a.data, $props: (a) => true ? shallowReadonly(a.props) : a.props, $attrs: (a) => true ? shallowReadonly(a.attrs) : a.attrs, $slots: (a) => true ? shallowReadonly(a.slots) : a.slots, $refs: (a) => true ? shallowReadonly(a.refs) : a.refs, $parent: (a) => getPublicInstance(a.parent), $root: (a) => getPublicInstance(a.root), $emit: (a) => a.emit, $options: (a) => __VUE_OPTIONS_API__ ? resolveMergedOptions(a) : a.type, $forceUpdate: (a) => a.f || (a.f = () => queueJob(a.update)), $nextTick: (a) => a.n || (a.n = nextTick.bind(a.proxy)), $watch: (a) => __VUE_OPTIONS_API__ ? instanceWatch.bind(a) : NOOP });
var isReservedPrefix = (a) => "_" === a || "$" === a;
var PublicInstanceProxyHandlers = { get({ _: f }, a) {
  let { ctx: c, setupState: b, data: e, props: i, accessCache: d, type: o, appContext: p2 } = f;
  if ("__isVue" === a)
    return true;
  if (b !== EMPTY_OBJ && b.__isScriptSetup && hasOwn(b, a))
    return b[a];
  let j;
  if ("$" !== a[0]) {
    let k = d[a];
    if (void 0 !== k)
      switch (k) {
        case 1:
          return b[a];
        case 2:
          return e[a];
        case 4:
          return c[a];
        case 3:
          return i[a];
      }
    else {
      if (b !== EMPTY_OBJ && hasOwn(b, a))
        return d[a] = 1, b[a];
      if (e !== EMPTY_OBJ && hasOwn(e, a))
        return d[a] = 2, e[a];
      if ((j = f.propsOptions[0]) && hasOwn(j, a))
        return d[a] = 3, i[a];
      if (c !== EMPTY_OBJ && hasOwn(c, a))
        return d[a] = 4, c[a];
      (!__VUE_OPTIONS_API__ || shouldCacheAccess) && (d[a] = 0);
    }
  }
  let l = publicPropertiesMap[a], g, m;
  return l ? ("$attrs" === a && (track(f, "get", a), markAttrsAccessed()), l(f)) : (g = o.__cssModules) && (g = g[a]) ? g : c !== EMPTY_OBJ && hasOwn(c, a) ? (d[a] = 4, c[a]) : hasOwn(m = p2.config.globalProperties, a) ? m[a] : void (currentRenderingInstance && (!isString(a) || 0 !== a.indexOf("__v")) && (e !== EMPTY_OBJ && isReservedPrefix(a[0]) && hasOwn(e, a) ? warn2(`Property ${JSON.stringify(a)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`) : f === currentRenderingInstance && warn2(`Property ${JSON.stringify(a)} was accessed during render but is not defined on instance.`)));
}, set({ _: b }, a, c) {
  let { data: d, setupState: e, ctx: f } = b;
  return e !== EMPTY_OBJ && hasOwn(e, a) ? (e[a] = c, true) : d !== EMPTY_OBJ && hasOwn(d, a) ? (d[a] = c, true) : hasOwn(b.props, a) ? (warn2(`Attempting to mutate prop "${a}". Props are readonly.`, b), false) : "$" === a[0] && a.slice(1) in b ? (warn2(`Attempting to mutate public property "${a}". Properties starting with $ are reserved and readonly.`, b), false) : (a in b.appContext.config.globalProperties ? Object.defineProperty(f, a, { enumerable: true, configurable: true, value: c }) : f[a] = c, true);
}, has({ _: { data: b, setupState: c, accessCache: e, ctx: f, appContext: g, propsOptions: i } }, a) {
  let d;
  return !!e[a] || b !== EMPTY_OBJ && hasOwn(b, a) || c !== EMPTY_OBJ && hasOwn(c, a) || (d = i[0]) && hasOwn(d, a) || hasOwn(f, a) || hasOwn(publicPropertiesMap, a) || hasOwn(g.config.globalProperties, a);
}, defineProperty(b, c, a) {
  return null != a.get ? b._.accessCache[c] = 0 : hasOwn(a, "value") && this.set(b, c, a.value, null), Reflect.defineProperty(b, c, a);
} };
PublicInstanceProxyHandlers.ownKeys = (a) => (warn2("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."), Reflect.ownKeys(a));
var RuntimeCompiledPublicInstanceProxyHandlers = extend({}, PublicInstanceProxyHandlers, { get(a, b) {
  if (b !== Symbol.unscopables)
    return PublicInstanceProxyHandlers.get(a, b, a);
}, has(_, a) {
  let b = "_" !== a[0] && !isGloballyWhitelisted(a);
  return !b && PublicInstanceProxyHandlers.has(_, a) && warn2(`Property ${JSON.stringify(a)} should not start with _ which is a reserved prefix for Vue internals.`), b;
} });
function createDevRenderContext(b) {
  let a = {};
  return Object.defineProperty(a, "_", { configurable: true, enumerable: false, get: () => b }), Object.keys(publicPropertiesMap).forEach((c) => {
    Object.defineProperty(a, c, { configurable: true, enumerable: false, get: () => publicPropertiesMap[c](b), set: NOOP });
  }), a;
}
function exposePropsOnRenderContext(b) {
  let { ctx: c, propsOptions: [a] } = b;
  a && Object.keys(a).forEach((a2) => {
    Object.defineProperty(c, a2, { enumerable: true, configurable: true, get: () => b.props[a2], set: NOOP });
  });
}
function exposeSetupStateOnRenderContext(a) {
  let { ctx: c, setupState: b } = a;
  Object.keys(toRaw(b)).forEach((a2) => {
    if (!b.__isScriptSetup) {
      if (isReservedPrefix(a2[0])) {
        warn2(`setup() return property ${JSON.stringify(a2)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);
        return;
      }
      Object.defineProperty(c, a2, { enumerable: true, configurable: true, get: () => b[a2], set: NOOP });
    }
  });
}
function createDuplicateChecker() {
  let a = /* @__PURE__ */ Object.create(null);
  return (c, b) => {
    a[b] ? warn2(`${c} property "${b}" is already defined in ${a[b]}.`) : a[b] = c;
  };
}
var shouldCacheAccess = true;
function applyOptions(a) {
  let m = resolveMergedOptions(a), c = a.proxy, e = a.ctx;
  shouldCacheAccess = false, m.beforeCreate && callHook(m.beforeCreate, a, "bc");
  let { data: n, computed: p2, methods: q, watch: r, provide: i, inject: u, created: v, beforeMount: H, mounted: I, beforeUpdate: J, updated: K, activated: L, deactivated: N, beforeDestroy: X, beforeUnmount: O, destroyed: Y, unmounted: P, render: w, renderTracked: Q, renderTriggered: R, errorCaptured: S, serverPrefetch: T, expose: s, inheritAttrs: x, components: C, directives: D, filters: Z } = m, f = true ? createDuplicateChecker() : null;
  if (true) {
    let [E] = a.propsOptions;
    if (E)
      for (let U in E)
        f("Props", U);
  }
  if (u && resolveInjections(u, e, f, a.appContext.config.unwrapInjectedRef), q)
    for (let g in q) {
      let j = q[g];
      isFunction(j) ? (true ? Object.defineProperty(e, g, { value: j.bind(c), configurable: true, enumerable: true, writable: true }) : e[g] = j.bind(c), f("Methods", g)) : warn2(`Method "${g}" has type "${typeof j}" in the component definition. Did you reference the function correctly?`);
    }
  if (n) {
    isFunction(n) || warn2("The data option must be a function. Plain object usage is no longer supported.");
    let k = n.call(c, c);
    if (isPromise(k) && warn2("data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>."), isObject(k)) {
      if (a.data = reactive(k), true)
        for (let t in k)
          f("Data", t), isReservedPrefix(t[0]) || Object.defineProperty(e, t, { configurable: true, enumerable: true, get: () => k[t], set: NOOP });
    } else
      warn2("data() should return an object.");
  }
  if (shouldCacheAccess = true, p2)
    for (let l in p2) {
      let d = p2[l], F = isFunction(d) ? d.bind(c, c) : isFunction(d.get) ? d.get.bind(c, c) : NOOP;
      F === NOOP && warn2(`Computed property "${l}" has no getter.`);
      let V = !isFunction(d) && isFunction(d.set) ? d.set.bind(c) : true ? () => {
        warn2(`Write operation failed: computed property "${l}" is readonly.`);
      } : NOOP, $ = computed2({ get: F, set: V });
      Object.defineProperty(e, l, { enumerable: true, configurable: true, get: () => $.value, set: (a2) => $.value = a2 }), f("Computed", l);
    }
  if (r)
    for (let G in r)
      createWatcher(r[G], e, c, G);
  if (i) {
    let W = isFunction(i) ? i.call(c) : i;
    Reflect.ownKeys(W).forEach((a2) => {
      provide(a2, W[a2]);
    });
  }
  function b(b2, a2) {
    isArray(a2) ? a2.forEach((a3) => b2(a3.bind(c))) : a2 && b2(a2.bind(c));
  }
  if (v && callHook(v, a, "c"), b(onBeforeMount, H), b(onMounted, I), b(onBeforeUpdate, J), b(onUpdated, K), b(onActivated, L), b(onDeactivated, N), b(onErrorCaptured, S), b(onRenderTracked, Q), b(onRenderTriggered, R), b(onBeforeUnmount, O), b(onUnmounted, P), b(onServerPrefetch, T), isArray(s)) {
    if (s.length) {
      let aa = a.exposed || (a.exposed = {});
      s.forEach((a2) => {
        Object.defineProperty(aa, a2, { get: () => c[a2], set: (b2) => c[a2] = b2 });
      });
    } else
      a.exposed || (a.exposed = {});
  }
  w && a.render === NOOP && (a.render = w), null != x && (a.inheritAttrs = x), C && (a.components = C), D && (a.directives = D);
}
function resolveInjections(c, e, g = NOOP, i = false) {
  for (let a in isArray(c) && (c = normalizeInject(c)), c) {
    let b = c[a], d;
    d = isObject(b) ? "default" in b ? inject(b.from || a, b.default, true) : inject(b.from || a) : inject(b), isRef(d) ? i ? Object.defineProperty(e, a, { enumerable: true, configurable: true, get: () => d.value, set: (a2) => d.value = a2 }) : (warn2(`injected property "${a}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`), e[a] = d) : e[a] = d, g("Inject", a);
  }
}
function callHook(a, b, c) {
  callWithAsyncErrorHandling(isArray(a) ? a.map((a2) => a2.bind(b.proxy)) : a.bind(b.proxy), b, c);
}
function createWatcher(a, g, b, c) {
  let d = c.includes(".") ? createPathGetter(b, c) : () => b[c];
  if (isString(a)) {
    let e = g[a];
    isFunction(e) ? watch(d, e) : warn2(`Invalid watch handler specified by key "${a}"`, e);
  } else if (isFunction(a))
    watch(d, a.bind(b));
  else if (isObject(a)) {
    if (isArray(a))
      a.forEach((a2) => createWatcher(a2, g, b, c));
    else {
      let f = isFunction(a.handler) ? a.handler.bind(b) : g[a.handler];
      isFunction(f) ? watch(d, f, a) : warn2(`Invalid watch handler specified by key "${a.handler}"`, f);
    }
  } else
    warn2(`Invalid watch option: "${c}"`, a);
}
function resolveMergedOptions(d) {
  let b = d.type, { mixins: g, extends: i } = b, { mixins: c, optionsCache: e, config: { optionMergeStrategies: j } } = d.appContext, f = e.get(b), a;
  return f ? a = f : c.length || g || i ? (a = {}, c.length && c.forEach((b2) => mergeOptions(a, b2, j, true)), mergeOptions(a, b, j)) : a = b, e.set(b, a), a;
}
function mergeOptions(b, c, d, i = false) {
  let { mixins: e, extends: f } = c;
  for (let a in f && mergeOptions(b, f, d, true), e && e.forEach((a2) => mergeOptions(b, a2, d, true)), c)
    if (i && "expose" === a)
      warn2('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');
    else {
      let g = internalOptionMergeStrats[a] || d && d[a];
      b[a] = g ? g(b[a], c[a]) : c[a];
    }
  return b;
}
var internalOptionMergeStrats = { data: mergeDataFn, props: mergeObjectOptions, emits: mergeObjectOptions, methods: mergeObjectOptions, computed: mergeObjectOptions, beforeCreate: mergeAsArray, created: mergeAsArray, beforeMount: mergeAsArray, mounted: mergeAsArray, beforeUpdate: mergeAsArray, updated: mergeAsArray, beforeDestroy: mergeAsArray, beforeUnmount: mergeAsArray, destroyed: mergeAsArray, unmounted: mergeAsArray, activated: mergeAsArray, deactivated: mergeAsArray, errorCaptured: mergeAsArray, serverPrefetch: mergeAsArray, components: mergeObjectOptions, directives: mergeObjectOptions, watch: mergeWatchOptions, provide: mergeDataFn, inject: mergeInject };
function mergeDataFn(b, c) {
  return c ? b ? function() {
    return extend(isFunction(b) ? b.call(this, this) : b, isFunction(c) ? c.call(this, this) : c);
  } : c : b;
}
function mergeInject(a, b) {
  return mergeObjectOptions(normalizeInject(a), normalizeInject(b));
}
function normalizeInject(a) {
  if (isArray(a)) {
    let c = {};
    for (let b = 0; b < a.length; b++)
      c[a[b]] = a[b];
    return c;
  }
  return a;
}
function mergeAsArray(a, b) {
  return a ? [...new Set([].concat(a, b))] : b;
}
function mergeObjectOptions(b, c) {
  return b ? extend(extend(/* @__PURE__ */ Object.create(null), b), c) : c;
}
function mergeWatchOptions(b, c) {
  if (!b)
    return c;
  if (!c)
    return b;
  let e = extend(/* @__PURE__ */ Object.create(null), b);
  for (let d in c)
    e[d] = mergeAsArray(b[d], c[d]);
  return e;
}
function initProps(a, d, f, g = false) {
  let b = {}, c = {};
  for (let e in def(c, InternalObjectKey, 1), a.propsDefaults = /* @__PURE__ */ Object.create(null), setFullProps(a, d, b, c), a.propsOptions[0])
    e in b || (b[e] = void 0);
  validateProps(d || {}, b, a), f ? a.props = g ? b : shallowReactive(b) : a.type.props ? a.props = b : a.props = c, a.attrs = c;
}
function updateProps(a, c, m, u) {
  let { props: f, attrs: b, vnode: { patchFlag: n } } = a, k = toRaw(f), [l] = a.propsOptions, i = false;
  if (!(a.type.__hmrId || a.parent && a.parent.type.__hmrId) && (u || n > 0) && !(16 & n)) {
    if (8 & n) {
      let r = a.vnode.dynamicProps;
      for (let o = 0; o < r.length; o++) {
        let d = r[o];
        if (isEmitListener(a.emitsOptions, d))
          continue;
        let j = c[d];
        if (l) {
          if (hasOwn(b, d))
            j !== b[d] && (b[d] = j, i = true);
          else {
            let s = camelize(d);
            f[s] = resolvePropValue(l, k, s, j, a, false);
          }
        } else
          j !== b[d] && (b[d] = j, i = true);
      }
    }
  } else {
    setFullProps(a, c, f, b) && (i = true);
    let p2;
    for (let e in k)
      c && (hasOwn(c, e) || (p2 = hyphenate(e)) !== e && hasOwn(c, p2)) || (l ? m && (void 0 !== m[e] || void 0 !== m[p2]) && (f[e] = resolvePropValue(l, k, e, void 0, a, true)) : delete f[e]);
    if (b !== k)
      for (let t in b)
        c && hasOwn(c, t) || (delete b[t], i = true);
  }
  i && trigger(a, "set", "$attrs"), validateProps(c || {}, f, a);
}
function setFullProps(f, i, j, k) {
  let [l, b] = f.propsOptions, o = false, m;
  if (i)
    for (let a in i) {
      if (isReservedProp(a))
        continue;
      let c = i[a], d;
      l && hasOwn(l, d = camelize(a)) ? b && b.includes(d) ? (m || (m = {}))[d] = c : j[d] = c : isEmitListener(f.emitsOptions, a) || a in k && c === k[a] || (k[a] = c, o = true);
    }
  if (b) {
    let q = toRaw(j), p2 = m || EMPTY_OBJ;
    for (let n = 0; n < b.length; n++) {
      let e = b[n];
      j[e] = resolvePropValue(l, q, e, p2[e], f, !hasOwn(p2, e));
    }
  }
  return o;
}
function resolvePropValue(i, j, c, a, f, k) {
  let b = i[c];
  if (null != b) {
    let g = hasOwn(b, "default");
    if (g && void 0 === a) {
      let d = b.default;
      if (b.type !== Function && isFunction(d)) {
        let { propsDefaults: e } = f;
        c in e ? a = e[c] : (setCurrentInstance(f), a = e[c] = d.call(null, j), unsetCurrentInstance());
      } else
        a = d;
    }
    b[0] && (k && !g ? a = false : b[1] && ("" === a || a === hyphenate(c)) && (a = true));
  }
  return a;
}
function normalizePropsOptions(c, g, t = false) {
  let i = g.propsCache, n = i.get(c);
  if (n)
    return n;
  let b = c.props, j = {}, o = [], u = false;
  if (__VUE_OPTIONS_API__ && !isFunction(c)) {
    let k = (c2) => {
      u = true;
      let [d, b2] = normalizePropsOptions(c2, g, true);
      extend(j, d), b2 && o.push(...b2);
    };
    !t && g.mixins.length && g.mixins.forEach(k), c.extends && k(c.extends), c.mixins && c.mixins.forEach(k);
  }
  if (!b && !u)
    return i.set(c, EMPTY_ARR), EMPTY_ARR;
  if (isArray(b))
    for (let e = 0; e < b.length; e++) {
      isString(b[e]) || warn2("props must be strings when using array syntax.", b[e]);
      let p2 = camelize(b[e]);
      validatePropName(p2) && (j[p2] = EMPTY_OBJ);
    }
  else if (b)
    for (let q in isObject(b) || warn2("invalid props options", b), b) {
      let l = camelize(q);
      if (validatePropName(l)) {
        let f = b[q], d = j[l] = isArray(f) || isFunction(f) ? { type: f } : f;
        if (d) {
          let m = getTypeIndex(Boolean, d.type), r = getTypeIndex(String, d.type);
          d[0] = m > -1, d[1] = r < 0 || m < r, (m > -1 || hasOwn(d, "default")) && o.push(l);
        }
      }
    }
  let s = [j, o];
  return i.set(c, s), s;
}
function validatePropName(a) {
  return "$" !== a[0] || (warn2(`Invalid prop name: "${a}" is a reserved property.`), false);
}
function getType(a) {
  let b = a && a.toString().match(/^\s*function (\w+)/);
  return b ? b[1] : null === a ? "null" : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(b, a) {
  return isArray(a) ? a.findIndex((a2) => isSameType(a2, b)) : isFunction(a) && isSameType(a, b) ? 0 : -1;
}
function validateProps(b, e, f) {
  let i = toRaw(e), c = f.propsOptions[0];
  for (let a in c) {
    let d = c[a];
    null != d && validateProp(a, i[a], d, !hasOwn(b, a) && !hasOwn(b, hyphenate(a)));
  }
}
function validateProp(c, b, f, k) {
  let { type: a, required: l, validator: g } = f;
  if (l && k) {
    warn2('Missing required prop: "' + c + '"');
    return;
  }
  if (null != b || f.required) {
    if (null != a && true !== a) {
      let d = false, i = isArray(a) ? a : [a], j = [];
      for (let e = 0; e < i.length && !d; e++) {
        let { valid: m, expectedType: n } = assertType(b, i[e]);
        j.push(n || ""), d = m;
      }
      if (!d) {
        warn2(getInvalidTypeMessage(c, b, j));
        return;
      }
    }
    g && !g(b) && warn2('Invalid prop: custom validator check failed for prop "' + c + '".');
  }
}
var isSimpleType = makeMap("String,Number,Boolean,Function,Symbol,BigInt");
function assertType(a, d) {
  let c, b = getType(d);
  if (isSimpleType(b)) {
    let e = typeof a;
    (c = e === b.toLowerCase()) || "object" !== e || (c = a instanceof d);
  } else
    c = "Object" === b ? isObject(a) : "Array" === b ? isArray(a) : "null" === b ? null === a : a instanceof d;
  return { valid: c, expectedType: b };
}
function getInvalidTypeMessage(f, c, d) {
  let a = `Invalid prop: type check failed for prop "${f}". Expected ${d.map(capitalize).join(" | ")}`, e = d[0], b = toRawType(c), g = styleValue(c, e), i = styleValue(c, b);
  return 1 === d.length && isExplicable(e) && !isBoolean(e, b) && (a += ` with value ${g}`), a += `, got ${b} `, isExplicable(b) && (a += `with value ${i}.`), a;
}
function styleValue(a, b) {
  return "String" === b ? `"${a}"` : "Number" === b ? `${Number(a)}` : `${a}`;
}
function isExplicable(a) {
  return ["string", "number", "boolean"].some((b) => a.toLowerCase() === b);
}
function isBoolean(...a) {
  return a.some((a2) => "boolean" === a2.toLowerCase());
}
var isInternalKey = (a) => "_" === a[0] || "$stable" === a;
var normalizeSlotValue = (a) => isArray(a) ? a.map(normalizeVNode) : [normalizeVNode(a)];
var normalizeSlot = (d, a, c) => {
  if (a._n)
    return a;
  let b = withCtx((...b2) => (currentInstance && warn2(`Slot "${d}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`), normalizeSlotValue(a(...b2))), c);
  return b._c = false, b;
};
var normalizeObjectSlots = (c, d, f) => {
  let e = c._ctx;
  for (let a in c) {
    if (isInternalKey(a))
      continue;
    let b = c[a];
    if (isFunction(b))
      d[a] = normalizeSlot(a, b, e);
    else if (null != b) {
      warn2(`Non-function value encountered for slot "${a}". Prefer function slots for better performance.`);
      let g = normalizeSlotValue(b);
      d[a] = () => g;
    }
  }
};
var normalizeVNodeSlots = (a, b) => {
  isKeepAlive(a.vnode) || warn2("Non-function value encountered for default slot. Prefer function slots for better performance.");
  let c = normalizeSlotValue(b);
  a.slots.default = () => c;
};
var initSlots = (a, b) => {
  if (32 & a.vnode.shapeFlag) {
    let c = b._;
    c ? (a.slots = toRaw(b), def(b, "_", c)) : normalizeObjectSlots(b, a.slots = {});
  } else
    a.slots = {}, b && normalizeVNodeSlots(a, b);
  def(a.slots, InternalObjectKey, 1);
};
var updateSlots = (i, b, j) => {
  let { vnode: k, slots: c } = i, d = true, e = EMPTY_OBJ;
  if (32 & k.shapeFlag) {
    let f = b._;
    f ? isHmrUpdating ? extend(c, b) : j && 1 === f ? d = false : (extend(c, b), j || 1 !== f || delete c._) : (d = !b.$stable, normalizeObjectSlots(b, c)), e = b;
  } else
    b && (normalizeVNodeSlots(i, b), e = { default: 1 });
  if (d)
    for (let g in c)
      isInternalKey(g) || g in e || delete c[g];
};
function createAppContext() {
  return { app: null, config: { isNativeTag: NO, performance: false, globalProperties: {}, optionMergeStrategies: {}, errorHandler: void 0, warnHandler: void 0, compilerOptions: {} }, mixins: [], components: {}, directives: {}, provides: /* @__PURE__ */ Object.create(null), optionsCache: /* @__PURE__ */ new WeakMap(), propsCache: /* @__PURE__ */ new WeakMap(), emitsCache: /* @__PURE__ */ new WeakMap() };
}
var uid = 0;
function createAppAPI(a, b) {
  return function(c, d = null) {
    isFunction(c) || (c = Object.assign({}, c)), null == d || isObject(d) || (warn2("root props passed to app.mount() must be an object."), d = null);
    let e = createAppContext(), g = /* @__PURE__ */ new Set(), i = false, f = e.app = { _uid: uid++, _component: c, _props: d, _container: null, _context: e, _instance: null, version, get config() {
      return e.config;
    }, set config(v) {
      warn2("app.config cannot be replaced. Modify individual options instead.");
    }, use: (a2, ...b2) => (g.has(a2) ? warn2("Plugin has already been applied to target app.") : a2 && isFunction(a2.install) ? (g.add(a2), a2.install(f, ...b2)) : isFunction(a2) ? (g.add(a2), a2(f, ...b2)) : warn2('A plugin must either be a function or an object with an "install" function.'), f), mixin: (a2) => (__VUE_OPTIONS_API__ ? e.mixins.includes(a2) ? warn2("Mixin has already been applied to target app" + (a2.name ? `: ${a2.name}` : "")) : e.mixins.push(a2) : warn2("Mixins are only available in builds supporting Options API"), f), component: (a2, b2) => (validateComponentName(a2, e.config), b2) ? (e.components[a2] && warn2(`Component "${a2}" has already been registered in target app.`), e.components[a2] = b2, f) : e.components[a2], directive: (a2, b2) => (validateDirectiveName(a2), b2) ? (e.directives[a2] && warn2(`Directive "${a2}" has already been registered in target app.`), e.directives[a2] = b2, f) : e.directives[a2], mount(j, k, l) {
      if (i)
        warn2("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`");
      else {
        j.__vue_app__ && warn2("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");
        let g2 = createVNode(c, d);
        return g2.appContext = e, e.reload = () => {
          a(cloneVNode(g2), j, l);
        }, k && b ? b(g2, j) : a(g2, j, l), i = true, f._container = j, j.__vue_app__ = f, f._instance = g2.component, devtoolsInitApp(f, version), getExposeProxy(g2.component) || g2.component.proxy;
      }
    }, unmount() {
      i ? (a(null, f._container), f._instance = null, devtoolsUnmountApp(f), delete f._container.__vue_app__) : warn2("Cannot unmount an app that is not mounted.");
    }, provide: (a2, b2) => (a2 in e.provides && warn2(`App already provides property with key "${String(a2)}". It will be overwritten with the new value.`), e.provides[a2] = b2, f) };
    return f;
  };
}
function setRef(e, i, n, d, j = false) {
  if (isArray(e)) {
    e.forEach((a2, b2) => setRef(a2, i && (isArray(i) ? i[b2] : i), n, d, j));
    return;
  }
  if (isAsyncWrapper(d) && !j)
    return;
  let o = 4 & d.shapeFlag ? getExposeProxy(d.component) || d.component.proxy : d.el, k = j ? null : o, { i: c, r: b } = e;
  if (!c) {
    warn2("Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.");
    return;
  }
  let a = i && i.r, l = c.refs === EMPTY_OBJ ? c.refs = {} : c.refs, m = c.setupState;
  if (null != a && a !== b && (isString(a) ? (l[a] = null, hasOwn(m, a) && (m[a] = null)) : isRef(a) && (a.value = null)), isFunction(b))
    callWithErrorHandling(b, c, 12, [k, l]);
  else {
    let p2 = isString(b), q = isRef(b);
    if (p2 || q) {
      let g = () => {
        if (e.f) {
          let a2 = p2 ? l[b] : b.value;
          j ? isArray(a2) && remove(a2, o) : isArray(a2) ? a2.includes(o) || a2.push(o) : p2 ? (l[b] = [o], hasOwn(m, b) && (m[b] = l[b])) : (b.value = [o], e.k && (l[e.k] = b.value));
        } else
          p2 ? (l[b] = k, hasOwn(m, b) && (m[b] = k)) : q ? (b.value = k, e.k && (l[e.k] = k)) : warn2("Invalid template ref type:", b, `(${typeof b})`);
      };
      k ? (g.id = -1, queuePostRenderEffect(g, n)) : g();
    } else
      warn2("Invalid template ref type:", b, `(${typeof b})`);
  }
}
var hasMismatch = false;
var isSVGContainer = (a) => /svg/.test(a.namespaceURI) && "foreignObject" !== a.tagName;
var isComment = (a) => 8 === a.nodeType;
function createHydrationFunctions(a) {
  let { mt: c, p: d, o: { patchProp: e, createText: f, nextSibling: g, parentNode: i, remove: j, insert: k, createComment: l } } = a, b = (j2, d2, u, l2, v, r = false) => {
    let w = isComment(j2) && "[" === j2.data, s = () => p2(j2, d2, u, l2, v, w), { type: z, ref: C, shapeFlag: x, patchFlag: D } = d2, t = j2.nodeType;
    d2.el = j2, -2 === D && (r = false, d2.dynamicChildren = null);
    let e2 = null;
    switch (z) {
      case Text:
        3 !== t ? "" === d2.children ? (k(d2.el = f(""), i(j2), j2), e2 = j2) : e2 = s() : (j2.data !== d2.children && (hasMismatch = true, warn2(`Hydration text mismatch:
- Client: ${JSON.stringify(j2.data)}
- Server: ${JSON.stringify(d2.children)}`), j2.data = d2.children), e2 = g(j2));
        break;
      case Comment:
        e2 = 8 !== t || w ? s() : g(j2);
        break;
      case Static:
        if (1 !== t && 3 !== t)
          e2 = s();
        else {
          e2 = j2;
          let E = !d2.children.length;
          for (let A = 0; A < d2.staticCount; A++)
            E && (d2.children += 1 === e2.nodeType ? e2.outerHTML : e2.data), A === d2.staticCount - 1 && (d2.anchor = e2), e2 = g(e2);
          return e2;
        }
        break;
      case Fragment:
        e2 = w ? o(j2, d2, u, l2, v, r) : s();
        break;
      default:
        if (1 & x)
          e2 = 1 !== t || d2.type.toLowerCase() !== j2.tagName.toLowerCase() ? s() : m(j2, d2, u, l2, v, r);
        else if (6 & x) {
          d2.slotScopeIds = v;
          let B = i(j2);
          if (c(d2, B, null, u, l2, isSVGContainer(B), r), (e2 = w ? q(j2) : g(j2)) && isComment(e2) && "teleport end" === e2.data && (e2 = g(e2)), isAsyncWrapper(d2)) {
            let y;
            w ? (y = createVNode(Fragment)).anchor = e2 ? e2.previousSibling : B.lastChild : y = 3 === j2.nodeType ? createTextVNode("") : createVNode("div"), y.el = j2, d2.component.subTree = y;
          }
        } else
          64 & x ? e2 = 8 !== t ? s() : d2.type.hydrate(j2, d2, u, l2, v, r, a, n) : 128 & x ? e2 = d2.type.hydrate(j2, d2, u, l2, isSVGContainer(i(j2)), v, r, a, b) : warn2("Invalid HostVNode type:", z, `(${typeof z})`);
    }
    return null != C && setRef(C, null, l2, d2), e2;
  }, m = (c2, b2, d2, o2, t, g2) => {
    g2 = g2 || !!b2.dynamicChildren;
    let { type: p3, props: a2, patchFlag: q2, shapeFlag: r, dirs: i2 } = b2, l2 = "input" === p3 && i2 || "option" === p3;
    if (true) {
      if (i2 && invokeDirectiveHook(b2, null, d2, "created"), a2) {
        if (l2 || !g2 || 48 & q2)
          for (let f2 in a2)
            (l2 && f2.endsWith("value") || isOn(f2) && !isReservedProp(f2)) && e(c2, f2, null, a2[f2], false, void 0, d2);
        else
          a2.onClick && e(c2, "onClick", null, a2.onClick, false, void 0, d2);
      }
      let m2;
      if ((m2 = a2 && a2.onVnodeBeforeMount) && invokeVNodeHook(m2, d2, b2), i2 && invokeDirectiveHook(b2, null, d2, "beforeMount"), ((m2 = a2 && a2.onVnodeMounted) || i2) && queueEffectWithSuspense(() => {
        m2 && invokeVNodeHook(m2, d2, b2), i2 && invokeDirectiveHook(b2, null, d2, "mounted");
      }, o2), 16 & r && !(a2 && (a2.innerHTML || a2.textContent))) {
        let k2 = n(c2.firstChild, b2, c2, d2, o2, t, g2), s = false;
        for (; k2; ) {
          hasMismatch = true, s || (warn2(`Hydration children mismatch in <${b2.type}>: server rendered element contains more child nodes than client vdom.`), s = true);
          let u = k2;
          k2 = k2.nextSibling, j(u);
        }
      } else
        8 & r && c2.textContent !== b2.children && (hasMismatch = true, warn2(`Hydration text content mismatch in <${b2.type}>:
- Client: ${c2.textContent}
- Server: ${b2.children}`), c2.textContent = b2.children);
    }
    return c2.nextSibling;
  }, n = (c2, j2, i2, k2, l2, m2, e2) => {
    e2 = e2 || !!j2.dynamicChildren;
    let f2 = j2.children, o2 = f2.length, n2 = false;
    for (let a2 = 0; a2 < o2; a2++) {
      let g2 = e2 ? f2[a2] : f2[a2] = normalizeVNode(f2[a2]);
      if (c2)
        c2 = b(c2, g2, k2, l2, m2, e2);
      else {
        if (g2.type === Text && !g2.children)
          continue;
        hasMismatch = true, n2 || (warn2(`Hydration children mismatch in <${i2.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`), n2 = true), d(null, g2, i2, null, k2, l2, isSVGContainer(i2), m2);
      }
    }
    return c2;
  }, o = (e2, b2, j2, m2, c2, o2) => {
    let { slotScopeIds: d2 } = b2;
    d2 && (c2 = c2 ? c2.concat(d2) : d2);
    let f2 = i(e2), a2 = n(g(e2), b2, f2, j2, m2, c2, o2);
    return a2 && isComment(a2) && "]" === a2.data ? g(b2.anchor = a2) : (hasMismatch = true, k(b2.anchor = l("]"), f2, a2), a2);
  }, p2 = (a2, b2, k2, l2, m2, n2) => {
    if (hasMismatch = true, warn2(`Hydration node mismatch:
- Client vnode:`, b2.type, `
- Server rendered DOM:`, a2, 3 === a2.nodeType ? "(text)" : isComment(a2) && "[" === a2.data ? "(start of fragment)" : ""), b2.el = null, n2) {
      let o2 = q(a2);
      for (; ; ) {
        let c2 = g(a2);
        if (c2 && c2 !== o2)
          j(c2);
        else
          break;
      }
    }
    let e2 = g(a2), f2 = i(a2);
    return j(a2), d(null, b2, f2, e2, k2, l2, isSVGContainer(f2), m2), e2;
  }, q = (a2) => {
    let b2 = 0;
    for (; a2; )
      if ((a2 = g(a2)) && isComment(a2) && ("[" === a2.data && b2++, "]" === a2.data)) {
        if (0 === b2)
          return g(a2);
        b2--;
      }
    return a2;
  };
  return [(c2, a2) => {
    if (!a2.hasChildNodes()) {
      warn2("Attempting to hydrate existing markup but container is empty. Performing full mount instead."), d(null, c2, a2), flushPostFlushCbs(), a2._vnode = c2;
      return;
    }
    hasMismatch = false, b(a2.firstChild, c2, null, null, null), flushPostFlushCbs(), a2._vnode = c2, hasMismatch && console.error("Hydration completed but contains mismatches.");
  }, b];
}
var supported;
var perf;
function startMeasure(a, b) {
  a.appContext.config.performance && isSupported() && perf.mark(`vue-${b}-${a.uid}`), devtoolsPerfStart(a, b, isSupported() ? perf.now() : Date.now());
}
function endMeasure(a, b) {
  if (a.appContext.config.performance && isSupported()) {
    let c = `vue-${b}-${a.uid}`, d = c + ":end";
    perf.mark(d), perf.measure(`<${formatComponentName(a, a.type)}> ${b}`, c, d), perf.clearMarks(c), perf.clearMarks(d);
  }
  devtoolsPerfEnd(a, b, isSupported() ? perf.now() : Date.now());
}
function isSupported() {
  return void 0 !== supported || ("undefined" != typeof window && window.performance ? (supported = true, perf = window.performance) : supported = false), supported;
}
function initFeatureFlags() {
  let a = [];
  if ("boolean" != typeof __VUE_OPTIONS_API__ && (a.push("__VUE_OPTIONS_API__"), getGlobalThis().__VUE_OPTIONS_API__ = true), "boolean" != typeof __VUE_PROD_DEVTOOLS__ && (a.push("__VUE_PROD_DEVTOOLS__"), getGlobalThis().__VUE_PROD_DEVTOOLS__ = false), a.length) {
    let b = a.length > 1;
    console.warn(`Feature flag${b ? "s" : ""} ${a.join(", ")} ${b ? "are" : "is"} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`);
  }
}
var queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(a) {
  return baseCreateRenderer(a);
}
function createHydrationRenderer(a) {
  return baseCreateRenderer(a, createHydrationFunctions);
}
function baseCreateRenderer(f, g) {
  initFeatureFlags();
  let a = getGlobalThis();
  a.__VUE__ = true, setDevtoolsHook(a.__VUE_DEVTOOLS_GLOBAL_HOOK__, a);
  let { insert: v, remove: w, patchProp: x, createElement: y, createText: z, createComment: A, setText: D, setElementText: E, parentNode: F, nextSibling: G, setScopeId: H = NOOP, cloneNode: I, insertStaticContent: J } = f, j = (a2, b2, c, d = null, e = null, f2 = null, g2 = false, j2 = null, i2 = !isHmrUpdating && !!b2.dynamicChildren) => {
    if (a2 === b2)
      return;
    a2 && !isSameVNodeType(a2, b2) && (d = s(a2), q(a2, e, f2, true), a2 = null), -2 === b2.patchFlag && (i2 = false, b2.dynamicChildren = null);
    let { type: k, ref: m2, shapeFlag: l2 } = b2;
    switch (k) {
      case Text:
        K(a2, b2, c, d);
        break;
      case Comment:
        L(a2, b2, c, d);
        break;
      case Static:
        null == a2 ? M(b2, c, d, g2) : N(a2, b2, c, g2);
        break;
      case Fragment:
        Y(a2, b2, c, d, e, f2, g2, j2, i2);
        break;
      default:
        1 & l2 ? R(a2, b2, c, d, e, f2, g2, j2, i2) : 6 & l2 ? Z(a2, b2, c, d, e, f2, g2, j2, i2) : 64 & l2 ? k.process(a2, b2, c, d, e, f2, g2, j2, i2, t) : 128 & l2 ? k.process(a2, b2, c, d, e, f2, g2, j2, i2, t) : warn2("Invalid VNode type:", k, `(${typeof k})`);
    }
    null != m2 && e && setRef(m2, a2 && a2.ref, f2, b2 || a2, !b2);
  }, K = (b2, a2, c, d) => {
    if (null == b2)
      v(a2.el = z(a2.children), c, d);
    else {
      let e = a2.el = b2.el;
      a2.children !== b2.children && D(e, a2.children);
    }
  }, L = (b2, a2, c, d) => {
    null == b2 ? v(a2.el = A(a2.children || ""), c, d) : a2.el = b2.el;
  }, M = (a2, b2, c, d) => {
    [a2.el, a2.anchor] = J(a2.children, b2, c, d, a2.el, a2.anchor);
  }, N = (b2, a2, c, d) => {
    if (a2.children !== b2.children) {
      let e = G(b2.anchor);
      P(b2), [a2.el, a2.anchor] = J(a2.children, c, e, d);
    } else
      a2.el = b2.el, a2.anchor = b2.anchor;
  }, O = ({ el: a2, anchor: b2 }, c, d) => {
    let e;
    for (; a2 && a2 !== b2; )
      e = G(a2), v(a2, c, d), a2 = e;
    v(b2, c, d);
  }, P = ({ el: a2, anchor: b2 }) => {
    let c;
    for (; a2 && a2 !== b2; )
      c = G(a2), w(a2), a2 = c;
    w(b2);
  }, R = (c, b2, i2, j2, d, e, a2, f2, g2) => {
    a2 = a2 || "svg" === b2.type, null == c ? S(b2, i2, j2, d, e, a2, f2, g2) : U(c, b2, d, e, a2, f2, g2);
  }, S = (a2, p3, q2, d, e, g2, m2, r2) => {
    let b2, i2, { type: s2, props: c, shapeFlag: n2, transition: j2, patchFlag: t2, dirs: k } = a2;
    if (false)
      b2 = a2.el = I(a2.el);
    else {
      if (b2 = a2.el = y(a2.type, g2, c && c.is, c), 8 & n2 ? E(b2, a2.children) : 16 & n2 && l(a2.children, b2, null, d, e, g2 && "foreignObject" !== s2, m2, r2), k && invokeDirectiveHook(a2, null, d, "created"), c) {
        for (let f2 in c)
          "value" === f2 || isReservedProp(f2) || x(b2, f2, null, c[f2], g2, a2.children, d, e, ag);
        "value" in c && x(b2, "value", null, c.value), (i2 = c.onVnodeBeforeMount) && invokeVNodeHook(i2, d, a2);
      }
      T(b2, a2, a2.scopeId, m2, d);
    }
    Object.defineProperty(b2, "__vnode", { value: a2, enumerable: false }), Object.defineProperty(b2, "__vueParentComponent", { value: d, enumerable: false }), k && invokeDirectiveHook(a2, null, d, "beforeMount");
    let o2 = (!e || e && !e.pendingBranch) && j2 && !j2.persisted;
    o2 && j2.beforeEnter(b2), v(b2, p3, q2), ((i2 = c && c.onVnodeMounted) || o2 || k) && queuePostRenderEffect(() => {
      i2 && invokeVNodeHook(i2, d, a2), o2 && j2.enter(b2), k && invokeDirectiveHook(a2, null, d, "mounted");
    }, e);
  }, T = (c, i2, g2, d, b2) => {
    if (g2 && H(c, g2), d)
      for (let e = 0; e < d.length; e++)
        H(c, d[e]);
    if (b2) {
      let a2 = b2.subTree;
      if (a2.patchFlag > 0 && 2048 & a2.patchFlag && (a2 = filterSingleRoot(a2.children) || a2), i2 === a2) {
        let f2 = b2.vnode;
        T(c, f2, f2.scopeId, f2.slotScopeIds, b2.parent);
      }
    }
  }, l = (b2, d, e, f2, g2, i2, k, c, l2 = 0) => {
    for (let a2 = l2; a2 < b2.length; a2++) {
      let m2 = b2[a2] = c ? cloneIfMounted(b2[a2]) : normalizeVNode(b2[a2]);
      j(null, m2, d, e, f2, g2, i2, k, c);
    }
  }, U = (c, a2, b2, g2, i2, r2, n2) => {
    let d = a2.el = c.el, { patchFlag: e, dynamicChildren: k, dirs: s2 } = a2;
    e |= 16 & c.patchFlag;
    let j2 = c.props || EMPTY_OBJ, f2 = a2.props || EMPTY_OBJ, p3;
    b2 && toggleRecurse(b2, false), (p3 = f2.onVnodeBeforeUpdate) && invokeVNodeHook(p3, b2, a2, c), s2 && invokeDirectiveHook(a2, c, b2, "beforeUpdate"), b2 && toggleRecurse(b2, true), isHmrUpdating && (e = 0, n2 = false, k = null);
    let t2 = i2 && "foreignObject" !== a2.type;
    if (k ? (m(c.dynamicChildren, k, d, b2, g2, t2, r2), b2 && b2.type.__hmrId && traverseStaticChildren(c, a2)) : n2 || o(c, a2, d, null, b2, g2, t2, r2, false), e > 0) {
      if (16 & e)
        X(d, a2, j2, f2, b2, g2, i2);
      else if (2 & e && j2.class !== f2.class && x(d, "class", null, f2.class, i2), 4 & e && x(d, "style", j2.style, f2.style, i2), 8 & e) {
        let u2 = a2.dynamicProps;
        for (let q2 = 0; q2 < u2.length; q2++) {
          let l2 = u2[q2], v2 = j2[l2], w2 = f2[l2];
          (w2 !== v2 || "value" === l2) && x(d, l2, v2, w2, i2, c.children, b2, g2, ag);
        }
      }
      1 & e && c.children !== a2.children && E(d, a2.children);
    } else
      n2 || null != k || X(d, a2, j2, f2, b2, g2, i2);
    ((p3 = f2.onVnodeUpdated) || s2) && queuePostRenderEffect(() => {
      p3 && invokeVNodeHook(p3, b2, a2, c), s2 && invokeDirectiveHook(a2, c, b2, "updated");
    }, g2);
  }, m = (e, c, f2, g2, i2, k, l2) => {
    for (let b2 = 0; b2 < c.length; b2++) {
      let a2 = e[b2], d = c[b2], m2 = a2.el && (a2.type === Fragment || !isSameVNodeType(a2, d) || 70 & a2.shapeFlag) ? F(a2.el) : f2;
      j(a2, d, m2, null, g2, i2, k, l2, true);
    }
  }, X = (e, f2, a2, b2, g2, i2, j2) => {
    if (a2 !== b2) {
      for (let c in b2) {
        if (isReservedProp(c))
          continue;
        let k = b2[c], l2 = a2[c];
        k !== l2 && "value" !== c && x(e, c, l2, k, j2, f2.children, g2, i2, ag);
      }
      if (a2 !== EMPTY_OBJ)
        for (let d in a2)
          isReservedProp(d) || d in b2 || x(e, d, a2[d], null, j2, f2.children, g2, i2, ag);
      "value" in b2 && x(e, "value", a2.value, b2.value);
    }
  }, Y = (a2, b2, e, q2, c, g2, i2, d, j2) => {
    let r2 = b2.el = a2 ? a2.el : z(""), k = b2.anchor = a2 ? a2.anchor : z(""), { patchFlag: f2, dynamicChildren: n2, slotScopeIds: p3 } = b2;
    (isHmrUpdating || 2048 & f2) && (f2 = 0, j2 = false, n2 = null), p3 && (d = d ? d.concat(p3) : p3), null == a2 ? (v(r2, e, q2), v(k, e, q2), l(b2.children, e, k, c, g2, i2, d, j2)) : f2 > 0 && 64 & f2 && n2 && a2.dynamicChildren ? (m(a2.dynamicChildren, n2, e, c, g2, i2, d), c && c.type.__hmrId ? traverseStaticChildren(a2, b2) : (null != b2.key || c && b2 === c.subTree) && traverseStaticChildren(a2, b2, true)) : o(a2, b2, e, k, c, g2, i2, d, j2);
  }, Z = (c, a2, d, e, f2, i2, g2, j2, b2) => {
    a2.slotScopeIds = j2, null == c ? 512 & a2.shapeFlag ? f2.ctx.activate(a2, d, e, g2, b2) : n(a2, d, e, f2, i2, g2, b2) : $(c, a2, b2);
  }, n = (b2, d, e, f2, c, g2, i2) => {
    let a2 = b2.component = createComponentInstance(b2, f2, c);
    if (a2.type.__hmrId && registerHMR(a2), pushWarningContext(b2), startMeasure(a2, "mount"), isKeepAlive(b2) && (a2.ctx.renderer = t), startMeasure(a2, "init"), setupComponent(a2), endMeasure(a2, "init"), a2.asyncDep) {
      if (c && c.registerDep(a2, aa), !b2.el) {
        let j2 = a2.subTree = createVNode(Comment);
        L(null, j2, d, e);
      }
      return;
    }
    aa(a2, b2, d, e, c, g2, i2), popWarningContext(), endMeasure(a2, "mount");
  }, $ = (c, a2, d) => {
    let b2 = a2.component = c.component;
    if (shouldUpdateComponent(c, a2, d)) {
      if (b2.asyncDep && !b2.asyncResolved) {
        pushWarningContext(a2), ab(b2, a2, d), popWarningContext();
        return;
      }
      b2.next = a2, invalidateJob(b2.update), b2.update();
    } else
      a2.el = c.el, b2.vnode = a2;
  }, aa = (a2, d, e, f2, g2, i2, l2) => {
    let c = a2.effect = new ReactiveEffect(() => {
      if (a2.isMounted) {
        let { next: b3, bu: t2, u: v2, parent: z2, vnode: n2 } = a2, A2 = b3, o2;
        pushWarningContext(b3 || a2.vnode), toggleRecurse(a2, false), b3 ? (b3.el = n2.el, ab(a2, b3, l2)) : b3 = n2, t2 && invokeArrayFns(t2), (o2 = b3.props && b3.props.onVnodeBeforeUpdate) && invokeVNodeHook(o2, z2, b3, n2), toggleRecurse(a2, true), startMeasure(a2, "render");
        let c2 = renderComponentRoot(a2);
        endMeasure(a2, "render");
        let p3 = a2.subTree;
        a2.subTree = c2, startMeasure(a2, "patch"), j(p3, c2, F(p3.el), s(p3), a2, g2, i2), endMeasure(a2, "patch"), b3.el = c2.el, null === A2 && updateHOCHostEl(a2, c2.el), v2 && queuePostRenderEffect(v2, g2), (o2 = b3.props && b3.props.onVnodeUpdated) && queuePostRenderEffect(() => invokeVNodeHook(o2, z2, b3, n2), g2), devtoolsComponentUpdated(a2), popWarningContext();
      } else {
        let q2, { el: B, props: k } = d, { bm: w2, m: x2, parent: m2 } = a2, r2 = isAsyncWrapper(d);
        if (toggleRecurse(a2, false), w2 && invokeArrayFns(w2), !r2 && (q2 = k && k.onVnodeBeforeMount) && invokeVNodeHook(q2, m2, d), toggleRecurse(a2, true), B && u) {
          let C = () => {
            startMeasure(a2, "render"), a2.subTree = renderComponentRoot(a2), endMeasure(a2, "render"), startMeasure(a2, "hydrate"), u(B, a2.subTree, a2, g2, null), endMeasure(a2, "hydrate");
          };
          r2 ? d.type.__asyncLoader().then(() => !a2.isUnmounted && C()) : C();
        } else {
          startMeasure(a2, "render");
          let y2 = a2.subTree = renderComponentRoot(a2);
          endMeasure(a2, "render"), startMeasure(a2, "patch"), j(null, y2, e, f2, a2, g2, i2), endMeasure(a2, "patch"), d.el = y2.el;
        }
        if (x2 && queuePostRenderEffect(x2, g2), !r2 && (q2 = k && k.onVnodeMounted)) {
          let D2 = d;
          queuePostRenderEffect(() => invokeVNodeHook(q2, m2, D2), g2);
        }
        (256 & d.shapeFlag || m2 && isAsyncWrapper(m2.vnode) && 256 & m2.vnode.shapeFlag) && a2.a && queuePostRenderEffect(a2.a, g2), a2.isMounted = true, devtoolsComponentAdded(a2), d = e = f2 = null;
      }
    }, () => queueJob(b2), a2.scope), b2 = a2.update = () => c.run();
    b2.id = a2.uid, toggleRecurse(a2, true), c.onTrack = a2.rtc ? (b3) => invokeArrayFns(a2.rtc, b3) : void 0, c.onTrigger = a2.rtg ? (b3) => invokeArrayFns(a2.rtg, b3) : void 0, b2.ownerInstance = a2, b2();
  }, ab = (a2, b2, c) => {
    b2.component = a2;
    let f2 = a2.vnode.props;
    a2.vnode = b2, a2.next = null, updateProps(a2, b2.props, f2, c), updateSlots(a2, b2.children, c), pauseTracking(), flushPreFlushCbs(void 0, a2.update), resetTracking();
  }, o = (f2, p3, a2, g2, b2, c, i2, j2, k = false) => {
    let d = f2 && f2.children, m2 = f2 ? f2.shapeFlag : 0, e = p3.children, { patchFlag: n2, shapeFlag: o2 } = p3;
    if (n2 > 0) {
      if (128 & n2) {
        ad(d, e, a2, g2, b2, c, i2, j2, k);
        return;
      }
      if (256 & n2) {
        ac(d, e, a2, g2, b2, c, i2, j2, k);
        return;
      }
    }
    8 & o2 ? (16 & m2 && ag(d, b2, c), e !== d && E(a2, e)) : 16 & m2 ? 16 & o2 ? ad(d, e, a2, g2, b2, c, i2, j2, k) : ag(d, b2, c, true) : (8 & m2 && E(a2, ""), 16 & o2 && l(e, a2, g2, b2, c, i2, j2, k));
  }, ac = (c, a2, i2, p3, d, e, k, m2, f2) => {
    c = c || EMPTY_ARR, a2 = a2 || EMPTY_ARR;
    let n2 = c.length, o2 = a2.length, g2 = Math.min(n2, o2), b2;
    for (b2 = 0; b2 < g2; b2++) {
      let q2 = a2[b2] = f2 ? cloneIfMounted(a2[b2]) : normalizeVNode(a2[b2]);
      j(c[b2], q2, i2, null, d, e, k, m2, f2);
    }
    n2 > o2 ? ag(c, d, e, true, false, g2) : l(a2, i2, p3, d, e, k, m2, f2, g2);
  }, ad = (o2, b2, l2, A2, f2, g2, r2, s2, e) => {
    let a2 = 0, w2 = b2.length, i2 = o2.length - 1, c = w2 - 1;
    for (; a2 <= i2 && a2 <= c; ) {
      let B = o2[a2], C = b2[a2] = e ? cloneIfMounted(b2[a2]) : normalizeVNode(b2[a2]);
      if (isSameVNodeType(B, C))
        j(B, C, l2, null, f2, g2, r2, s2, e);
      else
        break;
      a2++;
    }
    for (; a2 <= i2 && a2 <= c; ) {
      let D2 = o2[i2], E2 = b2[c] = e ? cloneIfMounted(b2[c]) : normalizeVNode(b2[c]);
      if (isSameVNodeType(D2, E2))
        j(D2, E2, l2, null, f2, g2, r2, s2, e);
      else
        break;
      i2--, c--;
    }
    if (a2 > i2) {
      if (a2 <= c) {
        let F2 = c + 1, L2 = F2 < w2 ? b2[F2].el : A2;
        for (; a2 <= c; )
          j(null, b2[a2] = e ? cloneIfMounted(b2[a2]) : normalizeVNode(b2[a2]), l2, L2, f2, g2, r2, s2, e), a2++;
      }
    } else if (a2 > c)
      for (; a2 <= i2; )
        q(o2[a2], f2, g2, true), a2++;
    else {
      let M2 = a2, m2 = a2, x2 = /* @__PURE__ */ new Map();
      for (a2 = m2; a2 <= c; a2++) {
        let u2 = b2[a2] = e ? cloneIfMounted(b2[a2]) : normalizeVNode(b2[a2]);
        null != u2.key && (x2.has(u2.key) && warn2("Duplicate keys found during update:", JSON.stringify(u2.key), "Make sure keys are unique."), x2.set(u2.key, a2));
      }
      let d, G2 = 0, v2 = c - m2 + 1, y2 = false, H2 = 0, t2 = new Array(v2);
      for (a2 = 0; a2 < v2; a2++)
        t2[a2] = 0;
      for (a2 = M2; a2 <= i2; a2++) {
        let n2 = o2[a2];
        if (G2 >= v2) {
          q(n2, f2, g2, true);
          continue;
        }
        let k;
        if (null != n2.key)
          k = x2.get(n2.key);
        else
          for (d = m2; d <= c; d++)
            if (0 === t2[d - m2] && isSameVNodeType(n2, b2[d])) {
              k = d;
              break;
            }
        void 0 === k ? q(n2, f2, g2, true) : (t2[k - m2] = a2 + 1, k >= H2 ? H2 = k : y2 = true, j(n2, b2[k], l2, null, f2, g2, r2, s2, e), G2++);
      }
      let I2 = y2 ? getSequence(t2) : EMPTY_ARR;
      for (d = I2.length - 1, a2 = v2 - 1; a2 >= 0; a2--) {
        let z2 = m2 + a2, J2 = b2[z2], K2 = z2 + 1 < w2 ? b2[z2 + 1].el : A2;
        0 === t2[a2] ? j(null, J2, l2, K2, f2, g2, r2, s2, e) : y2 && (d < 0 || a2 !== I2[d] ? p2(J2, l2, K2, 2) : d--);
      }
    }
  }, p2 = (c, a2, b2, d, n2 = null) => {
    let { el: e, type: g2, transition: i2, children: k, shapeFlag: f2 } = c;
    if (6 & f2) {
      p2(c.component.subTree, a2, b2, d);
      return;
    }
    if (128 & f2) {
      c.suspense.move(a2, b2, d);
      return;
    }
    if (64 & f2) {
      g2.move(c, a2, b2, t);
      return;
    }
    if (g2 === Fragment) {
      v(e, a2, b2);
      for (let j2 = 0; j2 < k.length; j2++)
        p2(k[j2], a2, b2, d);
      v(c.anchor, a2, b2);
      return;
    }
    if (g2 === Static) {
      O(c, a2, b2);
      return;
    }
    if (2 !== d && 1 & f2 && i2) {
      if (0 === d)
        i2.beforeEnter(e), v(e, a2, b2), queuePostRenderEffect(() => i2.enter(e), n2);
      else {
        let { leave: q2, delayLeave: l2, afterLeave: r2 } = i2, o2 = () => v(e, a2, b2), m2 = () => {
          q2(e, () => {
            o2(), r2 && r2();
          });
        };
        l2 ? l2(e, o2, m2) : m2();
      }
    } else
      v(e, a2, b2);
  }, q = (a2, c, b2, e = false, j2 = false) => {
    let { type: k, props: f2, ref: l2, children: p3, dynamicChildren: m2, shapeFlag: d, patchFlag: g2, dirs: q2 } = a2;
    if (null != l2 && setRef(l2, null, b2, a2, true), 256 & d) {
      c.ctx.deactivate(a2);
      return;
    }
    let n2 = 1 & d && q2, o2 = !isAsyncWrapper(a2), i2;
    if (o2 && (i2 = f2 && f2.onVnodeBeforeUnmount) && invokeVNodeHook(i2, c, a2), 6 & d)
      af(a2.component, b2, e);
    else {
      if (128 & d) {
        a2.suspense.unmount(b2, e);
        return;
      }
      n2 && invokeDirectiveHook(a2, null, c, "beforeUnmount"), 64 & d ? a2.type.remove(a2, c, b2, j2, t, e) : m2 && (k !== Fragment || g2 > 0 && 64 & g2) ? ag(m2, c, b2, false, true) : (k === Fragment && 384 & g2 || !j2 && 16 & d) && ag(p3, c, b2), e && r(a2);
    }
    (o2 && (i2 = f2 && f2.onVnodeUnmounted) || n2) && queuePostRenderEffect(() => {
      i2 && invokeVNodeHook(i2, c, a2), n2 && invokeDirectiveHook(a2, null, c, "unmounted");
    }, b2);
  }, r = (a2) => {
    let { type: c, el: g2, anchor: i2, transition: b2 } = a2;
    if (c === Fragment) {
      a2.patchFlag > 0 && 2048 & a2.patchFlag && b2 && !b2.persisted ? a2.children.forEach((a3) => {
        a3.type === Comment ? w(a3.el) : r(a3);
      }) : ae(g2, i2);
      return;
    }
    if (c === Static) {
      P(a2);
      return;
    }
    let d = () => {
      w(g2), b2 && !b2.persisted && b2.afterLeave && b2.afterLeave();
    };
    if (1 & a2.shapeFlag && b2 && !b2.persisted) {
      let { leave: j2, delayLeave: e } = b2, f2 = () => j2(g2, d);
      e ? e(a2.el, d, f2) : f2();
    } else
      d();
  }, ae = (a2, b2) => {
    let c;
    for (; a2 !== b2; )
      c = G(a2), w(a2), a2 = c;
    w(b2);
  }, af = (b2, a2, f2) => {
    b2.type.__hmrId && unregisterHMR(b2);
    let { bum: c, scope: g2, update: d, subTree: i2, um: e } = b2;
    c && invokeArrayFns(c), g2.stop(), d && (d.active = false, q(i2, b2, a2, f2)), e && queuePostRenderEffect(e, a2), queuePostRenderEffect(() => {
      b2.isUnmounted = true;
    }, a2), a2 && a2.pendingBranch && !a2.isUnmounted && b2.asyncDep && !b2.asyncResolved && b2.suspenseId === a2.pendingId && (a2.deps--, 0 === a2.deps && a2.resolve()), devtoolsComponentRemoved(b2);
  }, ag = (b2, c, d, e = false, f2 = false, g2 = 0) => {
    for (let a2 = g2; a2 < b2.length; a2++)
      q(b2[a2], c, d, e, f2);
  }, s = (a2) => 6 & a2.shapeFlag ? s(a2.component.subTree) : 128 & a2.shapeFlag ? a2.suspense.next() : G(a2.anchor || a2.el), i = (b2, a2, c) => {
    null == b2 ? a2._vnode && q(a2._vnode, null, null, true) : j(a2._vnode || null, b2, a2, null, null, null, c), flushPostFlushCbs(), a2._vnode = b2;
  }, t = { p: j, um: q, m: p2, r, mt: n, mc: l, pc: o, pbc: m, n: s, o: f }, b, u;
  return g && ([b, u] = g(t)), { render: i, hydrate: b, createApp: createAppAPI(i, b) };
}
function toggleRecurse({ effect: a, update: b }, c) {
  a.allowRecurse = b.allowRecurse = c;
}
function traverseStaticChildren(f, g, i = false) {
  let d = f.children, c = g.children;
  if (isArray(d) && isArray(c))
    for (let b = 0; b < d.length; b++) {
      let e = d[b], a = c[b];
      !(1 & a.shapeFlag) || a.dynamicChildren || ((a.patchFlag <= 0 || 32 === a.patchFlag) && ((a = c[b] = cloneIfMounted(c[b])).el = e.el), i || traverseStaticChildren(e, a)), a.type !== Comment || a.el || (a.el = e.el);
    }
}
function getSequence(e) {
  let g = e.slice(), a = [0], c, j, b, d, i, k = e.length;
  for (c = 0; c < k; c++) {
    let f = e[c];
    if (0 !== f) {
      if (e[j = a[a.length - 1]] < f) {
        g[c] = j, a.push(c);
        continue;
      }
      for (b = 0, d = a.length - 1; b < d; )
        e[a[i = b + d >> 1]] < f ? b = i + 1 : d = i;
      f < e[a[b]] && (b > 0 && (g[c] = a[b - 1]), a[b] = c);
    }
  }
  for (b = a.length, d = a[b - 1]; b-- > 0; )
    a[b] = d, d = g[d];
  return a;
}
var isTeleport = (a) => a.__isTeleport;
var isTeleportDisabled = (a) => a && (a.disabled || "" === a.disabled);
var isTargetSVG = (a) => "undefined" != typeof SVGElement && a instanceof SVGElement;
var resolveTarget = (b, c) => {
  let a = b && b.to;
  if (!isString(a))
    return a || isTeleportDisabled(b) || warn2(`Invalid Teleport target: ${a}`), a;
  if (!c)
    return warn2("Current renderer does not support string target for Teleports. (missing querySelector renderer option)"), null;
  {
    let d = c(a);
    return d || warn2(`Failed to locate Teleport target with selector "${a}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`), d;
  }
};
var TeleportImpl = { __isTeleport: true, process(b, a, e, n, o, p2, d, q, r, g) {
  let { mc: F, pc: B, pbc: C, o: { insert: j, querySelector: s, createText: k, createComment: t } } = g, l = isTeleportDisabled(a.props), { shapeFlag: G, children: H, dynamicChildren: m } = a;
  if (isHmrUpdating && (r = false, m = null), null == b) {
    let D = a.el = true ? t("teleport start") : k(""), u = a.anchor = true ? t("teleport end") : k("");
    j(D, e, n), j(u, e, n);
    let c = a.target = resolveTarget(a.props, s), v = a.targetAnchor = k("");
    c ? (j(v, c), d = d || isTargetSVG(c)) : l || warn2("Invalid Teleport target on mount:", c, `(${typeof c})`);
    let w = (a2, b2) => {
      16 & G && F(H, a2, b2, o, p2, d, q, r);
    };
    l ? w(e, u) : c && w(c, v);
  } else {
    a.el = b.el;
    let x = a.anchor = b.anchor, f = a.target = b.target, y = a.targetAnchor = b.targetAnchor, i = isTeleportDisabled(b.props), z = i ? e : f, E = i ? x : y;
    if (d = d || isTargetSVG(f), m ? (C(b.dynamicChildren, m, z, o, p2, d, q), traverseStaticChildren(b, a, true)) : r || B(b, a, z, E, o, p2, d, q, false), l)
      i || moveTeleport(a, e, x, g, 1);
    else if ((a.props && a.props.to) !== (b.props && b.props.to)) {
      let A = a.target = resolveTarget(a.props, s);
      A ? moveTeleport(a, A, null, g, 0) : warn2("Invalid Teleport target on update:", f, `(${typeof f})`);
    } else
      i && moveTeleport(a, f, y, g, 1);
  }
}, remove(e, f, g, p2, { um: i, o: { remove: b } }, j) {
  let { shapeFlag: k, children: c, anchor: l, targetAnchor: m, target: n, props: o } = e;
  if (n && b(m), (j || !isTeleportDisabled(o)) && (b(l), 16 & k))
    for (let a = 0; a < c.length; a++) {
      let d = c[a];
      i(d, f, g, true, !!d.dynamicChildren);
    }
}, move: moveTeleport, hydrate: hydrateTeleport };
function moveTeleport(f, a, b, { o: { insert: c }, m: j }, g = 2) {
  0 === g && c(f.targetAnchor, a, b);
  let { el: k, anchor: l, shapeFlag: m, children: i, props: n } = f, d = 2 === g;
  if (d && c(k, a, b), (!d || isTeleportDisabled(n)) && 16 & m)
    for (let e = 0; e < i.length; e++)
      j(i[e], a, b, 2);
  d && c(l, a, b);
}
function hydrateTeleport(e, a, g, i, j, k, { o: { nextSibling: c, parentNode: m, querySelector: n } }, l) {
  let d = a.target = resolveTarget(a.props, n);
  if (d) {
    let f = d._lpa || d.firstChild;
    if (16 & a.shapeFlag) {
      if (isTeleportDisabled(a.props))
        a.anchor = l(c(e), a, m(e), g, i, j, k), a.targetAnchor = f;
      else {
        a.anchor = c(e);
        let b = f;
        for (; b; )
          if ((b = c(b)) && 8 === b.nodeType && "teleport anchor" === b.data) {
            a.targetAnchor = b, d._lpa = a.targetAnchor && c(a.targetAnchor);
            break;
          }
        l(f, a, d, g, i, j, k);
      }
    }
  }
  return a.anchor && c(a.anchor);
}
var Teleport = TeleportImpl;
var Fragment = Symbol(true ? "Fragment" : void 0);
var Text = Symbol(true ? "Text" : void 0);
var Comment = Symbol(true ? "Comment" : void 0);
var Static = Symbol(true ? "Static" : void 0);
var blockStack = [];
var currentBlock = null;
function openBlock(a = false) {
  blockStack.push(currentBlock = a ? null : []);
}
function closeBlock() {
  blockStack.pop(), currentBlock = blockStack[blockStack.length - 1] || null;
}
var isBlockTreeEnabled = 1;
function setBlockTracking(a) {
  isBlockTreeEnabled += a;
}
function setupBlock(a) {
  return a.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null, closeBlock(), isBlockTreeEnabled > 0 && currentBlock && currentBlock.push(a), a;
}
function createElementBlock(a, b, c, d, e, f) {
  return setupBlock(createBaseVNode(a, b, c, d, e, f, true));
}
function createBlock(a, b, c, d, e) {
  return setupBlock(createVNode(a, b, c, d, e, true));
}
function isVNode(a) {
  return !!a && true === a.__v_isVNode;
}
function isSameVNodeType(b, a) {
  return !(6 & a.shapeFlag && hmrDirtyComponents.has(a.type)) && b.type === a.type && b.key === a.key;
}
var vnodeArgsTransformer;
function transformVNodeArgs(a) {
  vnodeArgsTransformer = a;
}
var createVNodeWithArgsTransform = (...a) => _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(a, currentRenderingInstance) : a);
var InternalObjectKey = "__vInternal";
var normalizeKey = ({ key: a }) => null != a ? a : null;
var normalizeRef = ({ ref: a, ref_key: b, ref_for: c }) => null != a ? isString(a) || isRef(a) || isFunction(a) ? { i: currentRenderingInstance, r: a, k: b, f: !!c } : a : null;
function createBaseVNode(d, b = null, c = null, f = 0, g = null, e = d === Fragment ? 0 : 1, i = false, j = false) {
  let a = { __v_isVNode: true, __v_skip: true, type: d, props: b, key: b && normalizeKey(b), ref: b && normalizeRef(b), scopeId: currentScopeId, slotScopeIds: null, children: c, component: null, suspense: null, ssContent: null, ssFallback: null, dirs: null, transition: null, el: null, anchor: null, target: null, targetAnchor: null, staticCount: 0, shapeFlag: e, patchFlag: f, dynamicProps: g, dynamicChildren: null, appContext: null };
  return j ? (normalizeChildren(a, c), 128 & e && d.normalize(a)) : c && (a.shapeFlag |= isString(c) ? 8 : 16), a.key != a.key && warn2("VNode created with invalid key (NaN). VNode type:", a.type), isBlockTreeEnabled > 0 && !i && currentBlock && (a.patchFlag > 0 || 6 & e) && 32 !== a.patchFlag && currentBlock.push(a), a;
}
var createVNode = true ? createVNodeWithArgsTransform : _createVNode;
function _createVNode(b, c = null, f = null, l = 0, m = null, j = false) {
  if (b && b !== NULL_DYNAMIC_COMPONENT || (b || warn2(`Invalid vnode type when creating vnode: ${b}.`), b = Comment), isVNode(b)) {
    let d = cloneVNode(b, c, true);
    return f && normalizeChildren(d, f), isBlockTreeEnabled > 0 && !j && currentBlock && (6 & d.shapeFlag ? currentBlock[currentBlock.indexOf(b)] = d : currentBlock.push(d)), d.patchFlag |= -2, d;
  }
  if (isClassComponent(b) && (b = b.__vccOpts), c) {
    let { class: i, style: e } = c = guardReactiveProps(c);
    i && !isString(i) && (c.class = normalizeClass(i)), isObject(e) && (isProxy(e) && !isArray(e) && (e = extend({}, e)), c.style = normalizeStyle(e));
  }
  let k = isString(b) ? 1 : isSuspense(b) ? 128 : isTeleport(b) ? 64 : isObject(b) ? 4 : isFunction(b) ? 2 : 0;
  return 4 & k && isProxy(b) && (b = toRaw(b), warn2("Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.", `
Component that was made reactive: `, b)), createBaseVNode(b, c, f, l, m, k, j, true);
}
function guardReactiveProps(b) {
  return b ? isProxy(b) || InternalObjectKey in b ? extend({}, b) : b : null;
}
function cloneVNode(a, b, i = false) {
  let { props: g, ref: c, patchFlag: d, children: e } = a, f = b ? mergeProps(g || {}, b) : g, j = { __v_isVNode: true, __v_skip: true, type: a.type, props: f, key: f && normalizeKey(f), ref: b && b.ref ? i && c ? isArray(c) ? c.concat(normalizeRef(b)) : [c, normalizeRef(b)] : normalizeRef(b) : c, scopeId: a.scopeId, slotScopeIds: a.slotScopeIds, children: -1 === d && isArray(e) ? e.map(deepCloneVNode) : e, target: a.target, targetAnchor: a.targetAnchor, staticCount: a.staticCount, shapeFlag: a.shapeFlag, patchFlag: b && a.type !== Fragment ? -1 === d ? 16 : 16 | d : d, dynamicProps: a.dynamicProps, dynamicChildren: a.dynamicChildren, appContext: a.appContext, dirs: a.dirs, transition: a.transition, component: a.component, suspense: a.suspense, ssContent: a.ssContent && cloneVNode(a.ssContent), ssFallback: a.ssFallback && cloneVNode(a.ssFallback), el: a.el, anchor: a.anchor };
  return j;
}
function deepCloneVNode(a) {
  let b = cloneVNode(a);
  return isArray(a.children) && (b.children = a.children.map(deepCloneVNode)), b;
}
function createTextVNode(a = " ", b = 0) {
  return createVNode(Text, null, a, b);
}
function createStaticVNode(b, c) {
  let a = createVNode(Static, null, b);
  return a.staticCount = c, a;
}
function createCommentVNode(a = "", b = false) {
  return b ? (openBlock(), createBlock(Comment, null, a)) : createVNode(Comment, null, a);
}
function normalizeVNode(a) {
  return null == a || "boolean" == typeof a ? createVNode(Comment) : isArray(a) ? createVNode(Fragment, null, a.slice()) : "object" == typeof a ? cloneIfMounted(a) : createVNode(Text, null, String(a));
}
function cloneIfMounted(a) {
  return null === a.el || a.memo ? a : cloneVNode(a);
}
function normalizeChildren(d, a) {
  let b = 0, { shapeFlag: e } = d;
  if (null == a)
    a = null;
  else if (isArray(a))
    b = 16;
  else if ("object" == typeof a) {
    if (65 & e) {
      let c = a.default;
      c && (c._c && (c._d = false), normalizeChildren(d, c()), c._c && (c._d = true));
      return;
    }
    {
      b = 32;
      let f = a._;
      f || InternalObjectKey in a ? 3 === f && currentRenderingInstance && (1 === currentRenderingInstance.slots._ ? a._ = 1 : (a._ = 2, d.patchFlag |= 1024)) : a._ctx = currentRenderingInstance;
    }
  } else
    isFunction(a) ? (a = { default: a, _ctx: currentRenderingInstance }, b = 32) : (a = String(a), 64 & e ? (b = 16, a = [createTextVNode(a)]) : b = 8);
  d.children = a, d.shapeFlag |= b;
}
function mergeProps(...g) {
  let a = {};
  for (let f = 0; f < g.length; f++) {
    let c = g[f];
    for (let b in c)
      if ("class" === b)
        a.class !== c.class && (a.class = normalizeClass([a.class, c.class]));
      else if ("style" === b)
        a.style = normalizeStyle([a.style, c.style]);
      else if (isOn(b)) {
        let d = a[b], e = c[b];
        e && d !== e && !(isArray(d) && d.includes(e)) && (a[b] = d ? [].concat(d, e) : e);
      } else
        "" !== b && (a[b] = c[b]);
  }
  return a;
}
function invokeVNodeHook(a, b, c, d = null) {
  callWithAsyncErrorHandling(a, b, 7, [c, d]);
}
var emptyAppContext = createAppContext();
var uid$1 = 0;
function createComponentInstance(c, b, f) {
  let d = c.type, e = (b ? b.appContext : c.appContext) || emptyAppContext, a = { uid: uid$1++, vnode: c, type: d, parent: b, appContext: e, root: null, next: null, subTree: null, effect: null, update: null, scope: new EffectScope(true), render: null, proxy: null, exposed: null, exposeProxy: null, withProxy: null, provides: b ? b.provides : Object.create(e.provides), accessCache: null, renderCache: [], components: null, directives: null, propsOptions: normalizePropsOptions(d, e), emitsOptions: normalizeEmitsOptions(d, e), emit: null, emitted: null, propsDefaults: EMPTY_OBJ, inheritAttrs: d.inheritAttrs, ctx: EMPTY_OBJ, data: EMPTY_OBJ, props: EMPTY_OBJ, attrs: EMPTY_OBJ, slots: EMPTY_OBJ, refs: EMPTY_OBJ, setupState: EMPTY_OBJ, setupContext: null, suspense: f, suspenseId: f ? f.pendingId : 0, asyncDep: null, asyncResolved: false, isMounted: false, isUnmounted: false, isDeactivated: false, bc: null, c: null, bm: null, m: null, bu: null, u: null, um: null, bum: null, da: null, a: null, rtg: null, rtc: null, ec: null, sp: null };
  return true ? a.ctx = createDevRenderContext(a) : a.ctx = { _: a }, a.root = b ? b.root : a, a.emit = emit$1.bind(null, a), c.ce && c.ce(a), a;
}
var currentInstance = null;
var getCurrentInstance = () => currentInstance || currentRenderingInstance;
var setCurrentInstance = (a) => {
  currentInstance = a, a.scope.on();
};
var unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off(), currentInstance = null;
};
var isBuiltInTag = makeMap("slot,component");
function validateComponentName(a, b) {
  let c = b.isNativeTag || NO;
  (isBuiltInTag(a) || c(a)) && warn2("Do not use built-in or reserved HTML elements as component id: " + a);
}
function isStatefulComponent(a) {
  return 4 & a.vnode.shapeFlag;
}
var isInSSRComponentSetup = false;
function setupComponent(a, b = false) {
  isInSSRComponentSetup = b;
  let { props: d, children: e } = a.vnode, c = isStatefulComponent(a);
  initProps(a, d, c, b), initSlots(a, e);
  let f = c ? setupStatefulComponent(a, b) : void 0;
  return isInSSRComponentSetup = false, f;
}
function setupStatefulComponent(a, f) {
  var g;
  let b = a.type;
  if (true) {
    if (b.name && validateComponentName(b.name, a.appContext.config), b.components) {
      let l = Object.keys(b.components);
      for (let i = 0; i < l.length; i++)
        validateComponentName(l[i], a.appContext.config);
    }
    if (b.directives) {
      let n = Object.keys(b.directives);
      for (let j = 0; j < n.length; j++)
        validateDirectiveName(n[j]);
    }
    b.compilerOptions && isRuntimeOnly() && warn2('"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.');
  }
  a.accessCache = /* @__PURE__ */ Object.create(null), a.proxy = markRaw(new Proxy(a.ctx, PublicInstanceProxyHandlers)), exposePropsOnRenderContext(a);
  let { setup: k } = b;
  if (k) {
    let o = a.setupContext = k.length > 1 ? createSetupContext(a) : null;
    setCurrentInstance(a), pauseTracking();
    let c = callWithErrorHandling(k, a, 0, [true ? shallowReadonly(a.props) : a.props, o]);
    if (resetTracking(), unsetCurrentInstance(), isPromise(c)) {
      if (c.then(unsetCurrentInstance, unsetCurrentInstance), f)
        return c.then((b2) => {
          handleSetupResult(a, b2, f);
        }).catch((b2) => {
          handleError(b2, a, 0);
        });
      if (a.asyncDep = c, !a.suspense) {
        let p2 = null !== (g = b.name) && void 0 !== g ? g : "Anonymous";
        warn2(`Component <${p2}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`);
      }
    } else
      handleSetupResult(a, c, f);
  } else
    finishComponentSetup(a, f);
}
function handleSetupResult(b, a, c) {
  isFunction(a) ? b.type.__ssrInlineRender ? b.ssrRender = a : b.render = a : isObject(a) ? (isVNode(a) && warn2("setup() should not return VNodes directly - return a render function instead."), b.devtoolsRawSetupState = a, b.setupState = proxyRefs(a), exposeSetupStateOnRenderContext(b)) : void 0 !== a && warn2(`setup() should return an object. Received: ${null === a ? "null" : typeof a}`), finishComponentSetup(b, c);
}
var compile;
var installWithProxy;
function registerRuntimeCompiler(a) {
  compile = a, installWithProxy = (a2) => {
    a2.render._rc && (a2.withProxy = new Proxy(a2.ctx, RuntimeCompiledPublicInstanceProxyHandlers));
  };
}
var isRuntimeOnly = () => !compile;
function finishComponentSetup(b, f, n) {
  let c = b.type;
  if (!b.render) {
    if (!f && compile && !c.render) {
      let g = c.template;
      if (g) {
        startMeasure(b, "compile");
        let { isCustomElement: i, compilerOptions: j } = b.appContext.config, { delimiters: k, compilerOptions: l } = c, m = extend(extend({ isCustomElement: i, delimiters: k }, j), l);
        c.render = compile(g, m), endMeasure(b, "compile");
      }
    }
    b.render = c.render || NOOP, installWithProxy && installWithProxy(b);
  }
  __VUE_OPTIONS_API__ && (setCurrentInstance(b), pauseTracking(), applyOptions(b), resetTracking(), unsetCurrentInstance()), c.render || b.render !== NOOP || f || (!compile && c.template ? warn2('Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".') : warn2("Component is missing template or render function."));
}
function createAttrsProxy(a) {
  return new Proxy(a.attrs, true ? { get: (b, c) => (markAttrsAccessed(), track(a, "get", "$attrs"), b[c]), set: () => (warn2("setupContext.attrs is readonly."), false), deleteProperty: () => (warn2("setupContext.attrs is readonly."), false) } : { get: (b, c) => (track(a, "get", "$attrs"), b[c]) });
}
function createSetupContext(a) {
  let c = (b2) => {
    a.exposed && warn2("expose() should be called only once per setup()."), a.exposed = b2 || {};
  }, b;
  return true ? Object.freeze({ get attrs() {
    return b || (b = createAttrsProxy(a));
  }, get slots() {
    return shallowReadonly(a.slots);
  }, get emit() {
    return (b2, ...c2) => a.emit(b2, ...c2);
  }, expose: c }) : { get attrs() {
    return b || (b = createAttrsProxy(a));
  }, slots: a.slots, emit: a.emit, expose: c };
}
function getExposeProxy(a) {
  if (a.exposed)
    return a.exposeProxy || (a.exposeProxy = new Proxy(proxyRefs(markRaw(a.exposed)), { get: (c, b) => b in c ? c[b] : b in publicPropertiesMap ? publicPropertiesMap[b](a) : void 0 }));
}
var classifyRE = /(?:^|[-_])(\w)/g;
var classify = (a) => a.replace(classifyRE, (a2) => a2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(a, b = true) {
  return isFunction(a) ? a.displayName || a.name : a.name || b && a.__name;
}
function formatComponentName(b, c, f = false) {
  let a = getComponentName(c);
  if (!a && c.__file) {
    let d = c.__file.match(/([^/\\]+)\.\w+$/);
    d && (a = d[1]);
  }
  if (!a && b && b.parent) {
    let e = (a2) => {
      for (let b2 in a2)
        if (a2[b2] === c)
          return b2;
    };
    a = e(b.components || b.parent.type.components) || e(b.appContext.components);
  }
  return a ? classify(a) : f ? "App" : "Anonymous";
}
function isClassComponent(a) {
  return isFunction(a) && "__vccOpts" in a;
}
var computed2 = (a, b) => computed(a, b, isInSSRComponentSetup);
var warnRuntimeUsage = (a) => warn2(`${a}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);
function defineProps() {
  return warnRuntimeUsage("defineProps"), null;
}
function defineEmits() {
  return warnRuntimeUsage("defineEmits"), null;
}
function defineExpose(a) {
  warnRuntimeUsage("defineExpose");
}
function withDefaults(a, b) {
  return warnRuntimeUsage("withDefaults"), null;
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function getContext() {
  let a = getCurrentInstance();
  return a || warn2("useContext() called without active instance."), a.setupContext || (a.setupContext = createSetupContext(a));
}
function mergeDefaults(e, c) {
  let d = isArray(e) ? e.reduce((a, b) => (a[b] = {}, a), {}) : e;
  for (let a in c) {
    let b = d[a];
    b ? isArray(b) || isFunction(b) ? d[a] = { type: b, default: c[a] } : b.default = c[a] : null === b ? d[a] = { default: c[a] } : warn2(`props default key "${a}" has no corresponding declaration.`);
  }
  return d;
}
function createPropsRestProxy(c, d) {
  let a = {};
  for (let b in c)
    d.includes(b) || Object.defineProperty(a, b, { enumerable: true, get: () => c[b] });
  return a;
}
function withAsyncContext(b) {
  let c = getCurrentInstance();
  c || warn2("withAsyncContext called without active current instance. This is likely a bug.");
  let a = b();
  return unsetCurrentInstance(), isPromise(a) && (a = a.catch((a2) => {
    throw setCurrentInstance(c), a2;
  })), [a, () => setCurrentInstance(c)];
}
function h(c, a, b) {
  let d = arguments.length;
  return 2 !== d ? (d > 3 ? b = Array.prototype.slice.call(arguments, 2) : 3 === d && isVNode(b) && (b = [b]), createVNode(c, a, b)) : !isObject(a) || isArray(a) ? createVNode(c, null, a) : isVNode(a) ? createVNode(c, null, [a]) : createVNode(c, a);
}
var ssrContextKey = Symbol(true ? "ssrContext" : "");
var useSSRContext = () => {
  {
    let a = inject(ssrContextKey);
    return a || warn2("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."), a;
  }
};
function isShallow2(a) {
  return !!(a && a["__v_isShallow"]);
}
function initCustomFormatter() {
  if ("undefined" == typeof window)
    return;
  let c = { style: "color:#3ba776" }, d = { style: "color:#0b1bc9" }, e = { style: "color:#b62e24" }, i = { style: "color:#9d288c" }, b = { header: (a) => isObject(a) ? a.__isVue ? ["div", c, "VueInstance"] : isRef(a) ? ["div", {}, ["span", c, p2(a)], "<", m(a.value), ">"] : isReactive(a) ? ["div", {}, ["span", c, isShallow2(a) ? "ShallowReactive" : "Reactive"], "<", m(a), `>${isReadonly(a) ? " (readonly)" : ""}`] : isReadonly(a) ? ["div", {}, ["span", c, isShallow2(a) ? "ShallowReadonly" : "Readonly"], "<", m(a), ">"] : null : null, hasBody: (a) => a && a.__isVue, body(a) {
    if (a && a.__isVue)
      return ["div", {}, ...k(a.$)];
  } };
  function k(a) {
    let b2 = [];
    a.type.props && a.props && b2.push(l("props", toRaw(a.props))), a.setupState !== EMPTY_OBJ && b2.push(l("setup", a.setupState)), a.data !== EMPTY_OBJ && b2.push(l("data", toRaw(a.data)));
    let c2 = n(a, "computed");
    c2 && b2.push(l("computed", c2));
    let d2 = n(a, "inject");
    return d2 && b2.push(l("injected", d2)), b2.push(["div", {}, ["span", { style: i.style + ";opacity:0.66" }, "$ (internal): "], ["object", { object: a }]]), b2;
  }
  function l(c2, b2) {
    return (b2 = extend({}, b2), Object.keys(b2).length) ? ["div", { style: "line-height:1.25em;margin-bottom:0.6em" }, ["div", { style: "color:#476582" }, c2], ["div", { style: "padding-left:1.25em" }, ...Object.keys(b2).map((a) => ["div", {}, ["span", i, a + ": "], m(b2[a], false)])]] : ["span", {}];
  }
  function m(a, b2 = true) {
    return "number" == typeof a ? ["span", d, a] : "string" == typeof a ? ["span", e, JSON.stringify(a)] : "boolean" == typeof a ? ["span", i, a] : isObject(a) ? ["object", { object: b2 ? toRaw(a) : a }] : ["span", e, String(a)];
  }
  function n(a, e2) {
    let c2 = a.type;
    if (isFunction(c2))
      return;
    let d2 = {};
    for (let b2 in a.ctx)
      o(c2, b2, e2) && (d2[b2] = a.ctx[b2]);
    return d2;
  }
  function o(a, c2, d2) {
    let b2 = a[d2];
    if (isArray(b2) && b2.includes(c2) || isObject(b2) && c2 in b2 || a.extends && o(a.extends, c2, d2) || a.mixins && a.mixins.some((a2) => o(a2, c2, d2)))
      return true;
  }
  function p2(a) {
    return isShallow2(a) ? "ShallowRef" : a.effect ? "ComputedRef" : "Ref";
  }
  window.devtoolsFormatters ? window.devtoolsFormatters.push(b) : window.devtoolsFormatters = [b];
}
function withMemo(b, f, c, d) {
  let a = c[d];
  if (a && isMemoSame(a, b))
    return a;
  let e = f();
  return e.memo = b.slice(), c[d] = e;
}
function isMemoSame(c, d) {
  let b = c.memo;
  if (b.length != d.length)
    return false;
  for (let a = 0; a < b.length; a++)
    if (hasChanged(b[a], d[a]))
      return false;
  return isBlockTreeEnabled > 0 && currentBlock && currentBlock.push(c), true;
}
var version = "3.2.37";
var _ssrUtils = { createComponentInstance, setupComponent, renderComponentRoot, setCurrentRenderingInstance, isVNode, normalizeVNode };
var ssrUtils = _ssrUtils;
var resolveFilter = null;
var compatUtils = null;

// node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var svgNS = "http://www.w3.org/2000/svg";
var doc = typeof document !== "undefined" ? document : null;
var templateContainer = doc && doc.createElement("template");
var nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is, props) => {
    const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el.setAttribute("multiple", props.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, "");
  },
  cloneNode(el) {
    const cloned = el.cloneNode(true);
    if (`_value` in el) {
      cloned._value = el._value;
    }
    return cloned;
  },
  insertStaticContent(content, parent, anchor, isSVG, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      before ? before.nextSibling : parent.firstChild,
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
function patchClass(el, value, isSVG) {
  const transitionClasses = el._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value);
  } else {
    el.className = value;
  }
}
function patchStyle(el, prev, next) {
  const style = el.style;
  const isCssString = isString(next);
  if (next && !isCssString) {
    for (const key in next) {
      setStyle(style, key, next[key]);
    }
    if (prev && !isString(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style, key, "");
        }
      }
    }
  } else {
    const currentDisplay = style.display;
    if (isCssString) {
      if (prev !== next) {
        style.cssText = next;
      }
    } else if (prev) {
      el.removeAttribute("style");
    }
    if ("_vod" in el) {
      style.display = currentDisplay;
    }
  }
}
var importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if (isArray(val)) {
    val.forEach((v) => setStyle(style, name, v));
  } else {
    if (val == null)
      val = "";
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
      } else {
        style[prefixed] = val;
      }
    }
  }
}
var prefixes = ["Webkit", "Moz", "ms"];
var prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
var xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr(key);
    if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean2 ? "" : value);
    }
  }
}
function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value == null ? "" : value;
    return;
  }
  if (key === "value" && el.tagName !== "PROGRESS" && !el.tagName.includes("-")) {
    el._value = value;
    const newValue = value == null ? "" : value;
    if (el.value !== newValue || el.tagName === "OPTION") {
      el.value = newValue;
    }
    if (value == null) {
      el.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el[key];
    if (type === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el[key] = value;
  } catch (e) {
    if (true) {
      warn2(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: value ${value} is invalid.`, e);
    }
  }
  needRemove && el.removeAttribute(key);
}
var [_getNow, skipTimestampCheck] = (() => {
  let _getNow2 = Date.now;
  let skipTimestampCheck2 = false;
  if (typeof window !== "undefined") {
    if (Date.now() > document.createEvent("Event").timeStamp) {
      _getNow2 = performance.now.bind(performance);
    }
    const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
    skipTimestampCheck2 = !!(ffMatch && Number(ffMatch[1]) <= 53);
  }
  return [_getNow2, skipTimestampCheck2];
})();
var cachedNow = 0;
var p = Promise.resolve();
var reset = () => {
  cachedNow = 0;
};
var getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
var optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m;
    while (m = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  return [hyphenate(name.slice(2)), options];
}
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    const timeStamp = e.timeStamp || _getNow();
    if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
      callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
    }
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value) {
  if (isArray(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map((fn) => (e2) => !e2._stopped && fn && fn(e2));
  } else {
    return value;
  }
}
var nativeOnRE = /^on[a-z]/;
var patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
    patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key === "true-value") {
      el._trueValue = nextValue;
    } else if (key === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString(value)) {
    return false;
  }
  return key in el;
}
function defineCustomElement(options, hydrate2) {
  const Comp = defineComponent(options);
  class VueCustomElement extends VueElement {
    constructor(initialProps) {
      super(Comp, initialProps, hydrate2);
    }
  }
  VueCustomElement.def = Comp;
  return VueCustomElement;
}
var defineSSRCustomElement = (options) => {
  return defineCustomElement(options, hydrate);
};
var BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
var VueElement = class extends BaseClass {
  constructor(_def, _props = {}, hydrate2) {
    super();
    this._def = _def;
    this._props = _props;
    this._instance = null;
    this._connected = false;
    this._resolved = false;
    this._numberProps = null;
    if (this.shadowRoot && hydrate2) {
      hydrate2(this._createVNode(), this.shadowRoot);
    } else {
      if (this.shadowRoot) {
        warn2(`Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`);
      }
      this.attachShadow({ mode: "open" });
    }
  }
  connectedCallback() {
    this._connected = true;
    if (!this._instance) {
      this._resolveDef();
    }
  }
  disconnectedCallback() {
    this._connected = false;
    nextTick(() => {
      if (!this._connected) {
        render(null, this.shadowRoot);
        this._instance = null;
      }
    });
  }
  _resolveDef() {
    if (this._resolved) {
      return;
    }
    this._resolved = true;
    for (let i = 0; i < this.attributes.length; i++) {
      this._setAttr(this.attributes[i].name);
    }
    new MutationObserver((mutations) => {
      for (const m of mutations) {
        this._setAttr(m.attributeName);
      }
    }).observe(this, { attributes: true });
    const resolve2 = (def2) => {
      const { props, styles } = def2;
      const hasOptions = !isArray(props);
      const rawKeys = props ? hasOptions ? Object.keys(props) : props : [];
      let numberProps;
      if (hasOptions) {
        for (const key in this._props) {
          const opt = props[key];
          if (opt === Number || opt && opt.type === Number) {
            this._props[key] = toNumber(this._props[key]);
            (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[key] = true;
          }
        }
      }
      this._numberProps = numberProps;
      for (const key of Object.keys(this)) {
        if (key[0] !== "_") {
          this._setProp(key, this[key], true, false);
        }
      }
      for (const key of rawKeys.map(camelize)) {
        Object.defineProperty(this, key, {
          get() {
            return this._getProp(key);
          },
          set(val) {
            this._setProp(key, val);
          }
        });
      }
      this._applyStyles(styles);
      this._update();
    };
    const asyncDef = this._def.__asyncLoader;
    if (asyncDef) {
      asyncDef().then(resolve2);
    } else {
      resolve2(this._def);
    }
  }
  _setAttr(key) {
    let value = this.getAttribute(key);
    if (this._numberProps && this._numberProps[key]) {
      value = toNumber(value);
    }
    this._setProp(camelize(key), value, false);
  }
  _getProp(key) {
    return this._props[key];
  }
  _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
    if (val !== this._props[key]) {
      this._props[key] = val;
      if (shouldUpdate && this._instance) {
        this._update();
      }
      if (shouldReflect) {
        if (val === true) {
          this.setAttribute(hyphenate(key), "");
        } else if (typeof val === "string" || typeof val === "number") {
          this.setAttribute(hyphenate(key), val + "");
        } else if (!val) {
          this.removeAttribute(hyphenate(key));
        }
      }
    }
  }
  _update() {
    render(this._createVNode(), this.shadowRoot);
  }
  _createVNode() {
    const vnode = createVNode(this._def, extend({}, this._props));
    if (!this._instance) {
      vnode.ce = (instance) => {
        this._instance = instance;
        instance.isCE = true;
        if (true) {
          instance.ceReload = (newStyles) => {
            if (this._styles) {
              this._styles.forEach((s) => this.shadowRoot.removeChild(s));
              this._styles.length = 0;
            }
            this._applyStyles(newStyles);
            if (!this._def.__asyncLoader) {
              this._instance = null;
              this._update();
            }
          };
        }
        instance.emit = (event, ...args) => {
          this.dispatchEvent(new CustomEvent(event, {
            detail: args
          }));
        };
        let parent = this;
        while (parent = parent && (parent.parentNode || parent.host)) {
          if (parent instanceof VueElement) {
            instance.parent = parent._instance;
            break;
          }
        }
      };
    }
    return vnode;
  }
  _applyStyles(styles) {
    if (styles) {
      styles.forEach((css) => {
        const s = document.createElement("style");
        s.textContent = css;
        this.shadowRoot.appendChild(s);
        if (true) {
          (this._styles || (this._styles = [])).push(s);
        }
      });
    }
  }
};
function useCssModule(name = "$style") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
      warn2(`useCssModule must be called inside setup()`);
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
      warn2(`Current instance does not have CSS modules injected.`);
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
      warn2(`Current instance does not have CSS module named "${name}".`);
      return EMPTY_OBJ;
    }
    return mod;
  }
}
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    warn2(`useCssVars is called without current active component instance.`);
    return;
  }
  const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));
  watchPostEffect(setVars);
  onMounted(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c) => setVarsOnVNode(c, vars));
  } else if (vnode.type === Static) {
    let { el, anchor } = vnode;
    while (el) {
      setVarsOnNode(el, vars);
      if (el === anchor)
        break;
      el = el.nextSibling;
    }
  }
}
function setVarsOnNode(el, vars) {
  if (el.nodeType === 1) {
    const style = el.style;
    for (const key in vars) {
      style.setProperty(`--${key}`, vars[key]);
    }
  }
}
var TRANSITION = "transition";
var ANIMATION = "animation";
var Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
var DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
var TransitionPropsValidators = Transition.props = extend({}, BaseTransition.props, DOMTransitionPropsValidators);
var callHook2 = (hook, args = []) => {
  if (isArray(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
var hasExplicitCallback = (hook) => {
  return hook ? isArray(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const { name = "v", type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    el._isLeaving = false;
    removeTransitionClass(el, leaveFromClass);
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el, isAppear, done);
      callHook2(hook, [el, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend(baseProps, {
    onBeforeEnter(el) {
      callHook2(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook2(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      el._isLeaving = true;
      const resolve2 = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      forceReflow();
      addTransitionClass(el, leaveActiveClass);
      nextFrame(() => {
        if (!el._isLeaving) {
          return;
        }
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el, type, leaveDuration, resolve2);
        }
      });
      callHook2(onLeave, [el, resolve2]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      callHook2(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      callHook2(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook2(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  if (true)
    validateDuration(res);
  return res;
}
function validateDuration(val) {
  if (typeof val !== "number") {
    warn2(`<transition> explicit duration is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn2(`<transition> explicit duration is NaN - the duration expression might be incorrect.`);
  }
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
  (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
  const { _vtc } = el;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
var endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
  const id = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id === el._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e) => {
    if (e.target === el && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(TRANSITION + "Delay");
  const transitionDurations = getStyleProperties(TRANSITION + "Duration");
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(ANIMATION + "Delay");
  const animationDurations = getStyleProperties(ANIMATION + "Duration");
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
var positionMap = /* @__PURE__ */ new WeakMap();
var newPositionMap = /* @__PURE__ */ new WeakMap();
var TransitionGroupImpl = {
  name: "TransitionGroup",
  props: extend({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c) => {
        const el = c.el;
        const style = el.style;
        addTransitionClass(el, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = "";
        const cb = el._moveCb = (e) => {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener("transitionend", cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || Fragment;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.key != null) {
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
        } else if (true) {
          warn2(`<TransitionGroup> children must be keyed.`);
        }
      }
      if (prevChildren) {
        for (let i = 0; i < prevChildren.length; i++) {
          const child = prevChildren[i];
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
var TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
  const el = c.el;
  if (el._moveCb) {
    el._moveCb();
  }
  if (el._enterCb) {
    el._enterCb();
  }
}
function recordPosition(c) {
  newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
  const oldPos = positionMap.get(c);
  const newPos = newPositionMap.get(c);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c.el.style;
    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
    s.transitionDuration = "0s";
    return c;
  }
}
function hasCSSTransform(el, root, moveClass) {
  const clone = el.cloneNode();
  if (el._vtc) {
    el._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
    });
  }
  moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
  clone.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone);
  const { hasTransform } = getTransitionInfo(clone);
  container.removeChild(clone);
  return hasTransform;
}
var getModelAssigner = (vnode) => {
  const fn = vnode.props["onUpdate:modelValue"] || false;
  return isArray(fn) ? (value) => invokeArrayFns(fn, value) : fn;
};
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  const target = e.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
var vModelText = {
  created(el, { modifiers: { lazy, trim, number } }, vnode) {
    el._assign = getModelAssigner(vnode);
    const castToNumber = number || vnode.props && vnode.props.type === "number";
    addEventListener(el, lazy ? "change" : "input", (e) => {
      if (e.target.composing)
        return;
      let domValue = el.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = toNumber(domValue);
      }
      el._assign(domValue);
    });
    if (trim) {
      addEventListener(el, "change", () => {
        el.value = el.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el, "compositionstart", onCompositionStart);
      addEventListener(el, "compositionend", onCompositionEnd);
      addEventListener(el, "change", onCompositionEnd);
    }
  },
  mounted(el, { value }) {
    el.value = value == null ? "" : value;
  },
  beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {
    el._assign = getModelAssigner(vnode);
    if (el.composing)
      return;
    if (document.activeElement === el && el.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim && el.value.trim() === value) {
        return;
      }
      if ((number || el.type === "number") && toNumber(el.value) === value) {
        return;
      }
    }
    const newValue = value == null ? "" : value;
    if (el.value !== newValue) {
      el.value = newValue;
    }
  }
};
var vModelCheckbox = {
  deep: true,
  created(el, _, vnode) {
    el._assign = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      const modelValue = el._modelValue;
      const elementValue = getValue(el);
      const checked = el.checked;
      const assign = el._assign;
      if (isArray(modelValue)) {
        const index = looseIndexOf(modelValue, elementValue);
        const found = index !== -1;
        if (checked && !found) {
          assign(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index, 1);
          assign(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign(cloned);
      } else {
        assign(getCheckboxValue(el, checked));
      }
    });
  },
  mounted: setChecked,
  beforeUpdate(el, binding, vnode) {
    el._assign = getModelAssigner(vnode);
    setChecked(el, binding, vnode);
  }
};
function setChecked(el, { value, oldValue }, vnode) {
  el._modelValue = value;
  if (isArray(value)) {
    el.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el.checked = looseEqual(value, getCheckboxValue(el, true));
  }
}
var vModelRadio = {
  created(el, { value }, vnode) {
    el.checked = looseEqual(value, vnode.props.value);
    el._assign = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      el._assign(getValue(el));
    });
  },
  beforeUpdate(el, { value, oldValue }, vnode) {
    el._assign = getModelAssigner(vnode);
    if (value !== oldValue) {
      el.checked = looseEqual(value, vnode.props.value);
    }
  }
};
var vModelSelect = {
  deep: true,
  created(el, { value, modifiers: { number } }, vnode) {
    const isSetModel = isSet(value);
    addEventListener(el, "change", () => {
      const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map((o) => number ? toNumber(getValue(o)) : getValue(o));
      el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
    });
    el._assign = getModelAssigner(vnode);
  },
  mounted(el, { value }) {
    setSelected(el, value);
  },
  beforeUpdate(el, _binding, vnode) {
    el._assign = getModelAssigner(vnode);
  },
  updated(el, { value }) {
    setSelected(el, value);
  }
};
function setSelected(el, value) {
  const isMultiple = el.multiple;
  if (isMultiple && !isArray(value) && !isSet(value)) {
    warn2(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
    return;
  }
  for (let i = 0, l = el.options.length; i < l; i++) {
    const option = el.options[i];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray(value)) {
        option.selected = looseIndexOf(value, optionValue) > -1;
      } else {
        option.selected = value.has(optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i)
          el.selectedIndex = i;
        return;
      }
    }
  }
  if (!isMultiple && el.selectedIndex !== -1) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return "_value" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el ? el[key] : checked;
}
var vModelDynamic = {
  created(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "created");
  },
  mounted(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "mounted");
  },
  beforeUpdate(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
  },
  updated(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "updated");
  }
};
function resolveDynamicModel(tagName, type) {
  switch (tagName) {
    case "SELECT":
      return vModelSelect;
    case "TEXTAREA":
      return vModelText;
    default:
      switch (type) {
        case "checkbox":
          return vModelCheckbox;
        case "radio":
          return vModelRadio;
        default:
          return vModelText;
      }
  }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
  const modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);
  const fn = modelToUse[hook];
  fn && fn(el, binding, vnode, prevVNode);
}
function initVModelForSSR() {
  vModelText.getSSRProps = ({ value }) => ({ value });
  vModelRadio.getSSRProps = ({ value }, vnode) => {
    if (vnode.props && looseEqual(vnode.props.value, value)) {
      return { checked: true };
    }
  };
  vModelCheckbox.getSSRProps = ({ value }, vnode) => {
    if (isArray(value)) {
      if (vnode.props && looseIndexOf(value, vnode.props.value) > -1) {
        return { checked: true };
      }
    } else if (isSet(value)) {
      if (vnode.props && value.has(vnode.props.value)) {
        return { checked: true };
      }
    } else if (value) {
      return { checked: true };
    }
  };
  vModelDynamic.getSSRProps = (binding, vnode) => {
    if (typeof vnode.type !== "string") {
      return;
    }
    const modelToUse = resolveDynamicModel(
      vnode.type.toUpperCase(),
      vnode.props && vnode.props.type
    );
    if (modelToUse.getSSRProps) {
      return modelToUse.getSSRProps(binding, vnode);
    }
  };
}
var systemModifiers = ["ctrl", "shift", "alt", "meta"];
var modifierGuards = {
  stop: (e) => e.stopPropagation(),
  prevent: (e) => e.preventDefault(),
  self: (e) => e.target !== e.currentTarget,
  ctrl: (e) => !e.ctrlKey,
  shift: (e) => !e.shiftKey,
  alt: (e) => !e.altKey,
  meta: (e) => !e.metaKey,
  left: (e) => "button" in e && e.button !== 0,
  middle: (e) => "button" in e && e.button !== 1,
  right: (e) => "button" in e && e.button !== 2,
  exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
};
var withModifiers = (fn, modifiers) => {
  return (event, ...args) => {
    for (let i = 0; i < modifiers.length; i++) {
      const guard = modifierGuards[modifiers[i]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn(event, ...args);
  };
};
var keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
var withKeys = (fn, modifiers) => {
  return (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
      return fn(event);
    }
  };
};
var vShow = {
  beforeMount(el, { value }, { transition }) {
    el._vod = el.style.display === "none" ? "" : el.style.display;
    if (transition && value) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value);
    }
  },
  mounted(el, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el);
    }
  },
  updated(el, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value);
    }
  },
  beforeUnmount(el, { value }) {
    setDisplay(el, value);
  }
};
function setDisplay(el, value) {
  el.style.display = value ? el._vod : "none";
}
function initVShowForSSR() {
  vShow.getSSRProps = ({ value }) => {
    if (!value) {
      return { style: { display: "none" } };
    }
  };
}
var rendererOptions = extend({ patchProp }, nodeOps);
var renderer;
var enabledHydration = false;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
var render = (...args) => {
  ensureRenderer().render(...args);
};
var hydrate = (...args) => {
  ensureHydrationRenderer().hydrate(...args);
};
var createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  if (true) {
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
var createSSRApp = (...args) => {
  const app = ensureHydrationRenderer().createApp(...args);
  if (true) {
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (container) {
      return mount(container, true, container instanceof SVGElement);
    }
  };
  return app;
};
function injectNativeTagCheck(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag(tag) || isSVGTag(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck(app) {
  if (isRuntimeOnly()) {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn2(`The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`);
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn2(msg);
        return compilerOptions;
      },
      set() {
        warn2(msg);
      }
    });
  }
}
function normalizeContainer(container) {
  if (isString(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn2(`Failed to mount app: mount target selector "${container}" returned null.`);
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn2(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
  }
  return container;
}
var ssrDirectiveInitialized = false;
var initDirectivesForSSR = () => {
  if (!ssrDirectiveInitialized) {
    ssrDirectiveInitialized = true;
    initVModelForSSR();
    initVShowForSSR();
  }
};

// node_modules/vue/dist/vue.runtime.esm-bundler.js
function initDev() {
  {
    initCustomFormatter();
  }
}
if (true) {
  initDev();
}
var compile2 = () => {
  if (true) {
    warn2(`Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
  }
};

export {
  normalizeStyle,
  normalizeClass,
  normalizeProps,
  toDisplayString,
  camelize,
  capitalize,
  toHandlerKey,
  EffectScope,
  effectScope,
  getCurrentScope,
  onScopeDispose,
  ReactiveEffect,
  effect,
  stop,
  reactive,
  shallowReactive,
  readonly,
  shallowReadonly,
  isReactive,
  isReadonly,
  isShallow,
  isProxy,
  toRaw,
  markRaw,
  isRef,
  ref,
  shallowRef,
  triggerRef,
  unref,
  proxyRefs,
  customRef,
  toRefs,
  toRef,
  warn2 as warn,
  callWithErrorHandling,
  callWithAsyncErrorHandling,
  handleError,
  nextTick,
  queuePostFlushCb,
  devtools,
  setDevtoolsHook,
  pushScopeId,
  popScopeId,
  withScopeId,
  withCtx,
  Suspense,
  provide,
  inject,
  watchEffect,
  watchPostEffect,
  watchSyncEffect,
  watch,
  useTransitionState,
  BaseTransition,
  resolveTransitionHooks,
  setTransitionHooks,
  getTransitionRawChildren,
  defineComponent,
  defineAsyncComponent,
  KeepAlive,
  onActivated,
  onDeactivated,
  onBeforeMount,
  onMounted,
  onBeforeUpdate,
  onUpdated,
  onBeforeUnmount,
  onUnmounted,
  onServerPrefetch,
  onRenderTriggered,
  onRenderTracked,
  onErrorCaptured,
  withDirectives,
  resolveComponent,
  resolveDynamicComponent,
  resolveDirective,
  renderList,
  createSlots,
  renderSlot,
  toHandlers,
  createRenderer,
  createHydrationRenderer,
  Teleport,
  Fragment,
  Text,
  Comment,
  Static,
  openBlock,
  setBlockTracking,
  createElementBlock,
  createBlock,
  isVNode,
  transformVNodeArgs,
  createBaseVNode,
  createVNode,
  guardReactiveProps,
  cloneVNode,
  createTextVNode,
  createStaticVNode,
  createCommentVNode,
  mergeProps,
  getCurrentInstance,
  registerRuntimeCompiler,
  isRuntimeOnly,
  computed2 as computed,
  defineProps,
  defineEmits,
  defineExpose,
  withDefaults,
  useSlots,
  useAttrs,
  mergeDefaults,
  createPropsRestProxy,
  withAsyncContext,
  h,
  ssrContextKey,
  useSSRContext,
  initCustomFormatter,
  withMemo,
  isMemoSame,
  version,
  ssrUtils,
  resolveFilter,
  compatUtils,
  defineCustomElement,
  defineSSRCustomElement,
  VueElement,
  useCssModule,
  useCssVars,
  Transition,
  TransitionGroup,
  vModelText,
  vModelCheckbox,
  vModelRadio,
  vModelSelect,
  vModelDynamic,
  withModifiers,
  withKeys,
  vShow,
  render,
  hydrate,
  createApp,
  createSSRApp,
  initDirectivesForSSR,
  compile2 as compile
};
//# sourceMappingURL=chunk-3LDFP562.js.map
